<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[An Android Dev Blog]]></title>
  <link href="http://antoine-merle.com/atom.xml" rel="self"/>
  <link href="http://antoine-merle.com/"/>
  <updated>2014-11-09T19:47:12+01:00</updated>
  <id>http://antoine-merle.com/</id>
  <author>
    <name><![CDATA[Antoine Merle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make your ProgressBar smoother]]></title>
    <link href="http://antoine-merle.com/blog/2013/11/12/make-your-progressbar-more-smooth/"/>
    <updated>2013-11-12T21:00:00+01:00</updated>
    <id>http://antoine-merle.com/blog/2013/11/12/make-your-progressbar-more-smooth</id>
    <content type="html"><![CDATA[<p>If you use the android Gmail application, you probably noticed that the progress bar is a bit customized.   I am not talking about the pull to resfresh but the indeterminate progress bar which appears just after. This indeterminate drawable is much smoother than the usual.</p>

<p>I will show you in this post a way to reproduce this smooth indeterminate horizontal progress bar. Here is the result: the first progress bar uses the default indeterminate drawable while the others are all custom.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/qt4lvQmY0F0 "></iframe></div>


<p><em>There is apparently a problem with the size of the video, so you might want to click <a href="http://www.youtube.com/watch?v=qt4lvQmY0F0">on this link</a> to see it on Youtube.</em></p>

<!-- more -->


<h1>How does the default animation work</h1>

<p>First of all, you will need to use the Horizontal progress bar style: <code>Widget.ProgressBar.Horizontal</code> for pre ICS and <code>Widget.Holo.ProgressBar.Horizontal</code> for post ICS devices. This gives us two important parameters: <code>indeterminateOnly=false</code> and <code>indeterminateDrawable</code>.</p>

<p>The default indeterminate drawable looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;animation-list</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="na">android:oneshot=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/progressbar_indeterminate_holo1&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;50&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/progressbar_indeterminate_holo2&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;50&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/progressbar_indeterminate_holo3&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;50&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/progressbar_indeterminate_holo4&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;50&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/progressbar_indeterminate_holo5&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;50&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/progressbar_indeterminate_holo6&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;50&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/progressbar_indeterminate_holo7&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;50&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:drawable=</span><span class="s">&quot;@drawable/progressbar_indeterminate_holo8&quot;</span> <span class="na">android:duration=</span><span class="s">&quot;50&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/animation-list&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s a simple animation drawable. That&rsquo;s why we cannot have the smoothness we want. We just have to make a custom indeterminate drawable which dynamically draws lines instead of drawing bitmaps.</p>

<h1>The custom indeterminate drawable</h1>

<p>Here is my original idea (don&rsquo;t be impressed by my graphic skills):</p>

<p><img class="center" src="http://antoine-merle.com/images/smoothprogressbar_exponential.png"></p>

<p>Basically we have some kind of exponential function we use to compute the length of each part of the drawable. In fact, the code is even simpler than that. We just have to loop and draw lines bigger than the previous one. You also have to take the offset in account, as this value will let you to have an animation.</p>

<p><em><strong>Note</strong>: My math skills are a bit poor, so I might be saying some stupid stuff, don&rsquo;t hesitate to comment :)</em></p>

<p>Here is the code I used.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="c1">// we loop to draw lines until we reach the max width</span>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">prev</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">value</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">Math</span><span class="o">.</span><span class="na">expm1</span><span class="o">(++</span><span class="n">i</span> <span class="o">+</span> <span class="n">offset</span><span class="o">);</span>
</span><span class='line'>    <span class="n">canvas</span><span class="o">.</span><span class="na">drawLine</span><span class="o">(</span><span class="n">prev</span><span class="o">,</span> <span class="n">centerY</span><span class="o">,</span> <span class="n">prev</span> <span class="o">+</span> <span class="n">value</span> <span class="o">-</span> <span class="n">mSeparatorWidth</span><span class="o">,</span> <span class="n">centerY</span><span class="o">,</span> <span class="n">mPaint</span><span class="o">);</span>
</span><span class='line'>    <span class="n">prev</span> <span class="o">=</span> <span class="n">value</span> <span class="o">+</span> <span class="n">prev</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I used the expm1 function (which returns exp(x) - 1) but you can try any growing function. We could imagine a function which multiply by two the previous part each time, or some kind of fibonacci sequence.</p>

<p>Here is the result for the code above:</p>

<p><img class="center" src="http://antoine-merle.com/images/smoothprogressbar.gif"></p>

<p>I could stop here but I wanted to go further and give to our drawable the possibility to be fully customizable.</p>

<h1>Use interpolators!</h1>

<p>I&rsquo;ve always loved the relation between these curves and animations. It allows developers to radically change their animation in just one line. You can make it bounce, overshoot,&hellip; just by changing the interpolator. I used interpolators here to change the way the animation looks like.</p>

<p>A chart is better than words:</p>

<p><img class="center" src="http://antoine-merle.com/images/smoothprogressbar_interpolator.png"></p>

<p>Well. Seeing this, code would be better than my chart. Sorry about that.</p>

<p>Basically, we set a number of sections. The interpolator will give us the ratio of each section&rsquo;s length. The animation is done by an offset, incremented at each frame.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="n">mBounds</span><span class="o">.</span><span class="na">width</span><span class="o">()</span> <span class="o">+</span> <span class="n">mSeparatorWidth</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">centerY</span> <span class="o">=</span> <span class="n">mBounds</span><span class="o">.</span><span class="na">centerY</span><span class="o">();</span>
</span><span class='line'><span class="kt">float</span> <span class="n">xSectionWidth</span> <span class="o">=</span> <span class="mi">1</span><span class="n">f</span> <span class="o">/</span> <span class="n">mSectionsCount</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//line before the first section</span>
</span><span class='line'><span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">mInterpolator</span><span class="o">.</span><span class="na">getInterpolation</span><span class="o">(</span><span class="n">mCurrentOffset</span><span class="o">)</span> <span class="o">-</span> <span class="n">mInterpolator</span><span class="o">.</span><span class="na">getInterpolation</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span> <span class="o">*</span> <span class="n">width</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">offset</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">offset</span> <span class="o">&gt;</span> <span class="n">mSeparatorWidth</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">canvas</span><span class="o">.</span><span class="na">drawLine</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">centerY</span><span class="o">,</span> <span class="n">offset</span> <span class="o">-</span> <span class="n">mSeparatorWidth</span><span class="o">,</span> <span class="n">centerY</span><span class="o">,</span> <span class="n">mPaint</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">prev</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">end</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">spaceLength</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mSectionsCount</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">xOffset</span> <span class="o">=</span> <span class="n">xSectionWidth</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="n">mCurrentOffset</span><span class="o">;</span>
</span><span class='line'>    <span class="n">prev</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">mInterpolator</span><span class="o">.</span><span class="na">getInterpolation</span><span class="o">(</span><span class="n">xOffset</span><span class="o">)</span> <span class="o">*</span> <span class="n">width</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">ratioSectionWidth</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">mInterpolator</span><span class="o">.</span><span class="na">getInterpolation</span><span class="o">(</span><span class="n">xOffset</span><span class="o">)</span> <span class="o">-</span>
</span><span class='line'>                    <span class="n">mInterpolator</span><span class="o">.</span><span class="na">getInterpolation</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">xOffset</span> <span class="o">+</span> <span class="n">xSectionWidth</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//separator between each piece of line                </span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sectionWidth</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">ratioSectionWidth</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">sectionWidth</span> <span class="o">+</span> <span class="n">prev</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">)</span>
</span><span class='line'>        <span class="n">spaceLength</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">sectionWidth</span><span class="o">,</span> <span class="n">mSeparatorWidth</span><span class="o">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">spaceLength</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">drawLength</span> <span class="o">=</span> <span class="n">sectionWidth</span> <span class="o">&gt;</span> <span class="n">spaceLength</span> <span class="o">?</span> <span class="n">sectionWidth</span> <span class="o">-</span> <span class="n">spaceLength</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="n">end</span> <span class="o">=</span> <span class="n">prev</span> <span class="o">+</span> <span class="n">drawLength</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">end</span> <span class="o">&gt;</span> <span class="n">prev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">canvas</span><span class="o">.</span><span class="na">drawLine</span><span class="o">(</span><span class="n">prev</span><span class="o">,</span> <span class="n">centerY</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">centerY</span><span class="o">,</span> <span class="n">mPaint</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the result with some basic interpolators:</p>

<p><img class="center" src="http://antoine-merle.com/images/smoothprogressbar_all.gif"></p>

<p>Sorry about the lag in the gif, a sample apk will be available soon, so stay tuned ;)</p>

<p><strong>Limitations</strong>: Your interpolator must be a monotonic function!</p>

<h1>Library</h1>

<p>I made a small lib available <a href="https://github.com/castorflex/SmoothProgressBar">on Github</a>! do not hesitate to fork it and make pull requests!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making that Google Plus profile screen]]></title>
    <link href="http://antoine-merle.com/blog/2013/10/04/making-that-google-plus-profile-screen/"/>
    <updated>2013-10-04T06:54:00+02:00</updated>
    <id>http://antoine-merle.com/blog/2013/10/04/making-that-google-plus-profile-screen</id>
    <content type="html"><![CDATA[<p>We will see here a way to make the Google Plus profile screen. I find this screen pretty interesting (although it suffers from some minor bugs), and wanted to try to find a way to do that.</p>

<p><img class="center" src="http://antoine-merle.com/images/screen_gplus_global.png"></p>

<p><em><strong>Note</strong>: I won&rsquo;t talk about the weird bottom bar you have to use if you want to make a new post. I hate that &lsquo;quick return&rsquo; bar</em></p>

<p>I&rsquo;ll cut this post in three parts:</p>

<ul>
<li>The view hierarchy</li>
<li>The parallax effect</li>
<li>The sticky tabs (tabs about/posts/videos, &hellip;)</li>
</ul>


<!-- more -->


<h1>The View Hierarchy</h1>

<h2>The Container</h2>

<p><img class="right" src="http://antoine-merle.com/images/screen_gplus_views.png" title="My design skills in action" ></p>

<p>Seems obvious we have a list at the bottom of the screen. The question is: <em>what is this header?</em></p>

<p>I see 2 options here:</p>

<ol>
<li>The header is not a header of the list. That means there is a FrameLayout (or anything else) containing a header and a list (with a big padding and <code>clipToPadding</code> set to false).</li>
<li>The header is included in the gridview as a HeaderView.</li>
</ol>


<p>Actually, there are some hints that indicate us that the second one is more plausible:</p>

<ul>
<li>We can scroll by touching <strong>anywhere</strong> in the header. Hmm ok but we also could with custom views. We would probably have to change the default behavior of the tabs by overriding the <code>onInterceptTouchEvent</code> and <code>onTouchEvent</code> methods.</li>
<li>There is the edge effect at the top of the list. However, we could put the listView over the header in order to see the edge effect. The sticky tabs would also be visible because they are drawn after the listview&rsquo;s <code>draw</code>. (See part 3).</li>
<li>I think this is easier to do this way (especially if you want to be compatible pre ICS).</li>
</ul>


<p>The main xml should look like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;GridView</span> <span class="err">...</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm ok it&rsquo;s a <code>StaggeredGridView</code>, but it&rsquo;s basically the same. Don&rsquo;t blame me if I call that a ListView or a GridView thereafter.</p>

<h2>The header</h2>

<p><img class="center" src="http://antoine-merle.com/images/screen_gplus_header_overdraw.png"></p>

<p>Take a look at the overdraw. The header image is light red. That means pixels are drawn four times. ouch. I&rsquo;m sorry but I guess it should be blue, right? I mean, there is the activity&rsquo;s background, and&hellip; what else? There is obviously a perf issue here.</p>

<p><em><strong>Note</strong>: If you want to know more about overdraws, read <a href="http://www.curious-creature.org/2012/12/01/android-performance-case-study/">this post</a> by <a href="http://twitter.com/romainguy">Romain Guy</a>.</em></p>

<p>Here is an example of hierarchy you could have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- in a real application you should use styles and dimens... --&gt;</span>
</span><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ImageView</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/header_imageview&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;150dp&quot;</span>
</span><span class='line'>        <span class="na">android:scaleType=</span><span class="s">&quot;centerCrop&quot;</span>
</span><span class='line'>        <span class="na">android:adjustViewBounds=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>         <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;LinearLayout</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/informations_container&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>        <span class="na">android:layout_below=</span><span class="s">&quot;@+id/header_imageview&quot;</span>
</span><span class='line'>        <span class="na">android:gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>        <span class="na">android:paddingTop=</span><span class="s">&quot;32dp&quot;</span>
</span><span class='line'>        <span class="na">android:paddingBottom=</span><span class="s">&quot;32dp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;TextView</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;@string/header_name&quot;</span>
</span><span class='line'>            <span class="na">android:textStyle=</span><span class="s">&quot;bold&quot;</span>
</span><span class='line'>            <span class="na">android:textSize=</span><span class="s">&quot;17dp&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;TextView</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_marginTop=</span><span class="s">&quot;4dp&quot;</span>
</span><span class='line'>            <span class="na">android:gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>            <span class="na">android:textColor=</span><span class="s">&quot;#FF707070&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;TextView</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_marginTop=</span><span class="s">&quot;8dp&quot;</span>
</span><span class='line'>            <span class="na">android:textColor=</span><span class="s">&quot;#FF909090&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/LinearLayout&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;HorizontalScrollView</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:scrollbars=</span><span class="s">&quot;none&quot;</span>
</span><span class='line'>        <span class="na">android:layout_below=</span><span class="s">&quot;@+id/informations_container&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;#FFF0F0F0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;LinearLayout</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:orientation=</span><span class="s">&quot;horizontal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c">&lt;!-- Here are the tabs, Just TextViews with a selector and a clickListener... --&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- There is also two views at each edge with a gradient drawable making the fade effect. But I find this pretty ugly. --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;/LinearLayout&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/HorizontalScrollView&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- cheat code: negative margin --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ImageView</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;75dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;75dp&quot;</span>
</span><span class='line'>        <span class="na">android:src=</span><span class="s">&quot;@drawable/avatar&quot;</span>
</span><span class='line'>        <span class="na">android:layout_centerHorizontal=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:layout_above=</span><span class="s">&quot;@+id/informations_container&quot;</span>
</span><span class='line'>        <span class="na">android:layout_marginBottom=</span><span class="s">&quot;-16dp&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is basically all concerning the view hierarchy.</p>

<p><em><strong>Note:</strong> If you want to know how to make the rounded avatar, I strongly suggest you to read <a href="http://evel.io/2013/07/21/rounded-avatars-in-android/">an excellent post</a> by <a href="https://plus.google.com/u/0/103638111379552295023/posts">Evelio Tarazona Cáceres</a>.</em></p>

<h1>The Parallax Effect</h1>

<p>There is a nice parallax effect on the header image. Basically, when you scroll up your list, the image has to scroll by <code>0.5 * translationY</code> instead of <code>1 * translationY</code>. You cannot cancel the translation on the parent, because it&rsquo;s part of the GridView so you will have to translate the image by <code>-0.5 * translationY</code>.</p>

<p>Just set a <code>OnScrollListener</code> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onScroll</span><span class="o">(</span><span class="n">AbsListView</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">firstVisibleItem</span><span class="o">,</span> <span class="kt">int</span> <span class="n">visibleItemCount</span><span class="o">,</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">totalItemCount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">visibleItemCount</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">firstVisibleItem</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mImageView</span><span class="o">.</span><span class="na">setTranslationY</span><span class="o">(-</span><span class="n">mListView</span><span class="o">.</span><span class="na">getChildAt</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getTop</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would work. BUT:</p>

<ol>
<li>You don&rsquo;t support pre API14 (we don&rsquo;t care, but the G+ app does)</li>
<li>If you use a TranslateAnimation for pre ICS devices, you will have an overdraw issue.</li>
</ol>


<p>You just need to draw the visible part of the bitmap. Let&rsquo;s create a custom ImageView, define a <code>setParallaxTranslation</code> method and override the <code>draw</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCurrentTranslation</span><span class="o">(</span><span class="kt">int</span> <span class="n">currentTranslation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mCurrentTranslation</span> <span class="o">=</span> <span class="n">currentTranslation</span><span class="o">;</span>
</span><span class='line'>  <span class="n">invalidate</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="n">mCurrentTranslation</span> <span class="o">/</span> <span class="mi">2</span><span class="o">)</span>  <span class="o">;</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">restore</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then change the call from <code>mImageView.setTranslationY(-mListView.getChildAt(0).getTop() / 2);</code> to <code>mImageView.setCurrentTranslation(mListView.getChildAt(0).getTop());</code></p>

<p><em><strong>EXTRA 1</strong>:</em></p>

<p>You can add a <code>ColorFilter</code> to add a nice effect on the ImageView:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCurrentTranslation</span><span class="o">(</span><span class="kt">int</span> <span class="n">currentTranslation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mCurrentTranslation</span> <span class="o">=</span> <span class="n">currentTranslation</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">ratio</span> <span class="o">=</span>  <span class="o">-</span><span class="n">mCurrentTranslation</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span><span class="n">getHeight</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">color</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">argb</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">fMAX_COLORFILTER_ALPHA</span> <span class="o">*</span> <span class="n">ratio</span><span class="o">),</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setColorFilter</span><span class="o">(</span><span class="n">color</span><span class="o">,</span> <span class="n">PorterDuff</span><span class="o">.</span><span class="na">Mode</span><span class="o">.</span><span class="na">SRC_ATOP</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this, the ImageView will be darker when you scroll.</p>

<p><em><strong>EXTRA 2</strong>: If you want to make more parallax stuff on your apps, take a look at the <a href="https://github.com/chrisjenx/Paralloid">Paralloid library</a> by <a href="https://twitter.com/chrisjenx">Christopher Jenkins</a>.</em></p>

<h1>The Sticky Header</h1>

<p>Firstly, I would like to thank <a href="http://flavienlaurent.com">Flavien Laurent</a> who helped me a lot for this part!</p>

<p><em><strong>Note</strong>: The tabs are sticky and appear over the listView. That means this View is drawn over the GridView.</em></p>

<p>There are many ways to stick a header, and the simplest is to support only API14+ devices, which gives access to operations on Views like <code>View#setTranslationX/Y</code>.</p>

<h3>1st solution: The tabs are not part of the header</h3>

<p>This seems to be the simplest way to do it, but this won&rsquo;t work very well on preICS devices (who cares?).</p>

<p>You activity is composed of a FrameLayout containing a <code>ListView</code> and the sticky <code>HorizontalScrollView</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;FrameLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ListView</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/listview&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;include</span>
</span><span class='line'>        <span class="na">layout=</span><span class="s">&quot;@layout/stickyheader&quot;</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/stickyheader&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/FrameLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ListView</code> will contain the header, containing a dummy view. This view needs to has the same height as your tabs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;fr.castorflex.android.googleplusprofilepageapp.ParallaxImageView</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;LinearLayout</span> <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TextView</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TextView</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TextView</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/LinearLayout&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- dummy view; the sticky header will be positionned here--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;View</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;48dp&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ImageView</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the only thing you need is to translate your sticky view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mListView</span> <span class="o">=</span> <span class="o">(</span><span class="n">StickyListView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">listview</span><span class="o">);</span>
</span><span class='line'><span class="n">mStickyHeader</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">header</span><span class="o">);</span>
</span><span class='line'><span class="n">mHeader</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">header</span><span class="o">,</span> <span class="n">mListView</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">addHeaderView</span><span class="o">(</span><span class="n">mHeader</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">setOnScrollListener</span><span class="o">(</span><span class="k">new</span> <span class="n">AbsListView</span><span class="o">.</span><span class="na">OnScrollListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onScroll</span><span class="o">(</span><span class="n">AbsListView</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">firstVisibleItem</span><span class="o">,</span> <span class="kt">int</span> <span class="n">visibleItemCount</span><span class="o">,</span> <span class="kt">int</span> <span class="n">totalItemCount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">visibleItemCount</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">mHeader</span><span class="o">.</span><span class="na">getTop</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">tabsHeight</span> <span class="o">=</span> <span class="n">mStickyHeader</span><span class="o">.</span><span class="na">getMeasuredHeight</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">headerViewHeight</span> <span class="o">=</span> <span class="n">mHeader</span><span class="o">.</span><span class="na">getMeasuredHeight</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">headerViewHeight</span> <span class="o">-</span> <span class="n">tabsHeight</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mStickyHeader</span><span class="o">.</span><span class="na">setTranslationY</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">delta</span> <span class="o">+</span> <span class="n">top</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to make it compatible preICS, do not use NineOldAndroids. NineOldAndroids is a wrapper and will use preICS animations. That means the draw of the view will be translated, but the touch events won&rsquo;t be.</p>

<p><em>e.g. Imagine you have a button in 0,0 and you translate it in 150,150 with a <code>TranslateAnimation</code>. You will notice that if you click on 150,150 the button won&rsquo;t be clicked but if you click on 0,0 the event will be called.</em></p>

<p>The only way to move your view preICS is to play with the margins. BUT you will have to call <code>requestLayout()</code> each time you set the new topMargin&rsquo;s value. If you do that, you will notice lags. <a href="https://github.com/droidcon/iosched/blob/DroidconUK2013/android/src/main/java/com/funkyandroid/droidcon/uk/iosched/ui/SessionDetailFragment.java#L222">Follow this link for an example</a></p>

<h3>2nd solution: Dynamically change the parent of your stickyHeader view</h3>

<p>In this solution, the tabs are part of the ListView&rsquo;s header, until we need to stick them.
This solution is better for the preICS devices, but requestLayout() will be called each time we change the parent (as we remove the view and then add it in the FrameLayout, <code>requestLayout()</code> will be called twice).</p>

<p>Here is the new Header View:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;fr.castorflex.android.googleplusprofilepageapp.ParallaxImageView</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;LinearLayout</span> <span class="err">...</span> <span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TextView</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TextView</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TextView</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/LinearLayout&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- we add one more container to facilitate the add/remove view --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;FrameLayout</span> <span class="na">android:id=</span><span class="s">&quot;@+id/tabs_container&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;48dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_below=</span><span class="s">&quot;@+id/informations_container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;HorizontalScrollView</span>
</span><span class='line'>          <span class="na">android:id=</span><span class="s">&quot;@+id/horizontalscrollview&quot;</span>
</span><span class='line'>              <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>              <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>              <span class="na">android:scrollbars=</span><span class="s">&quot;none&quot;</span>
</span><span class='line'>          <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>          <span class="nt">&lt;LinearLayout</span>
</span><span class='line'>              <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>              <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>              <span class="na">android:orientation=</span><span class="s">&quot;horizontal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>              <span class="c">&lt;!-- tabs here --&gt;</span>
</span><span class='line'>
</span><span class='line'>          <span class="nt">&lt;/LinearLayout&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/HorizontalScrollView&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/FrameLayout&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ImageView</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Keep a boolean to know if you sticked your view (<code>mIsHeaderSticked</code> here).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mIsHeaderSticked</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">mMainView</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">main_view</span><span class="o">);</span>
</span><span class='line'><span class="n">mHeader</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">header</span><span class="o">,</span> <span class="n">mListView</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="n">mHorizontalScrollViewContainer</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">mHeader</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tabs_container</span><span class="o">);</span>
</span><span class='line'><span class="n">mHorizontalScrollView</span> <span class="o">=</span> <span class="n">mHeader</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">horizontalscrollview</span><span class="o">);</span>
</span><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">addHeaderView</span><span class="o">(</span><span class="n">mHeader</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">setOnScrollListener</span><span class="o">(</span><span class="k">new</span> <span class="n">AbsListView</span><span class="o">.</span><span class="na">OnScrollListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onScroll</span><span class="o">(</span><span class="n">AbsListView</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">firstVisibleItem</span><span class="o">,</span> <span class="kt">int</span> <span class="n">visibleItemCount</span><span class="o">,</span> <span class="kt">int</span> <span class="n">totalItemCount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">visibleItemCount</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">shouldStick</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">view</span><span class="o">.</span><span class="na">getChildAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">!=</span> <span class="n">mHeader</span><span class="o">)</span> <span class="n">shouldStick</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">mHeader</span><span class="o">.</span><span class="na">getTop</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">tabsHeight</span> <span class="o">=</span> <span class="n">mHorizontalScrollView</span><span class="o">.</span><span class="na">getMeasuredHeight</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">headerViewHeight</span> <span class="o">=</span> <span class="n">mHeader</span><span class="o">.</span><span class="na">getMeasuredHeight</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">headerViewHeight</span> <span class="o">-</span> <span class="n">tabsHeight</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">delta</span> <span class="o">+</span> <span class="n">top</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">shouldStick</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">shouldStick</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mIsSticked</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mIsSticked</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">((</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">mHorizontalScrollView</span><span class="o">.</span><span class="na">getParent</span><span class="o">()).</span><span class="na">removeView</span><span class="o">(</span><span class="n">mHorizontalScrollView</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mMainView</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">mHorizontalScrollView</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">shouldStick</span> <span class="o">&amp;&amp;</span> <span class="n">mIsSticked</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mIsSticked</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="o">((</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">mHorizontalScrollView</span><span class="o">.</span><span class="na">getParent</span><span class="o">()).</span><span class="na">removeView</span><span class="o">(</span><span class="n">mHorizontalScrollView</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mHorizontalScrollViewContainer</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">mHorizontalScrollView</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3rd solution: Just draw the horizontalScrollView, and capture touch events</h3>

<p>This solution is great if you only have to draw a <strong>stateless</strong> view, but can be pretty hard to implement if you have views you can interact with.</p>

<p>The idea here is to keep the tabs in the ListView&rsquo;s header, but when we need to stick it, the <code>ListView</code> will draw the tabs over the list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">setOnScrollListener</span><span class="o">(</span><span class="k">new</span> <span class="n">AbsListView</span><span class="o">.</span><span class="na">OnScrollListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onScroll</span><span class="o">(</span><span class="n">AbsListView</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">firstVisibleItem</span><span class="o">,</span> <span class="kt">int</span> <span class="n">visibleItemCount</span><span class="o">,</span> <span class="kt">int</span> <span class="n">totalItemCount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">visibleItemCount</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">shouldStick</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">view</span><span class="o">.</span><span class="na">getChildAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">!=</span> <span class="n">mHeader</span><span class="o">)</span> <span class="n">shouldStick</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">mHeader</span><span class="o">.</span><span class="na">getTop</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">tabsHeight</span> <span class="o">=</span> <span class="n">mHorizontalScrollView</span><span class="o">.</span><span class="na">getMeasuredHeight</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">headerViewHeight</span> <span class="o">=</span> <span class="n">mHeader</span><span class="o">.</span><span class="na">getMeasuredHeight</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">headerViewHeight</span> <span class="o">-</span> <span class="n">tabsHeight</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">delta</span> <span class="o">+</span> <span class="n">top</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">shouldStick</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//sticky header</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">shouldStick</span><span class="o">)</span>
</span><span class='line'>            <span class="n">mListView</span><span class="o">.</span><span class="na">setViewToDraw</span><span class="o">(</span><span class="n">mHorizontalScrollViewContainer</span><span class="o">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">mListView</span><span class="o">.</span><span class="na">setViewToDraw</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In your custom ListView, provide a <code>setViewToDraw</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setViewToDraw</span><span class="o">(</span><span class="n">View</span> <span class="n">viewToDraw</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mViewToDraw</span> <span class="o">==</span> <span class="n">viewToDraw</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mViewToDraw</span> <span class="o">=</span> <span class="n">viewToDraw</span><span class="o">;</span>
</span><span class='line'>    <span class="n">invalidate</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and override the <code>dispatchDraw</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">dispatchDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">dispatchDraw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mViewToDraw</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mViewToDraw</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your tabs should stick now but you cannot interact with them. Here is what I did, but unfortunately it doesn&rsquo;t work very well, as I am unable to make the fling work&hellip; If you have any idea on how to improve it, please do not hesitate to <a href="http://antoine-merle.com/about">contact me</a>.</p>

<p>Firstly create an enum with the different states:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">enum</span> <span class="n">TouchState</span> <span class="o">{</span><span class="n">NONE</span><span class="o">,</span> <span class="n">TOUCHING_HEADER</span><span class="o">}</span>
</span><span class='line'><span class="kd">private</span> <span class="n">TouchState</span> <span class="n">mTouchState</span> <span class="o">=</span> <span class="n">TouchState</span><span class="o">.</span><span class="na">NONE</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then override the <code>dispatchTouchEvent</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">mViewToDraw</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">bottom</span> <span class="o">=</span> <span class="n">mViewToDraw</span><span class="o">.</span><span class="na">getMeasuredHeight</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">captured</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">invalidate</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="o">(</span><span class="n">ev</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">ev</span><span class="o">.</span><span class="na">getY</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">bottom</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mTouchState</span> <span class="o">=</span> <span class="n">TouchState</span><span class="o">.</span><span class="na">TOUCHING_HEADER</span><span class="o">;</span>
</span><span class='line'>        <span class="n">invalidate</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">captured</span> <span class="o">=</span> <span class="n">mViewToDraw</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mTouchState</span> <span class="o">==</span> <span class="n">TouchState</span><span class="o">.</span><span class="na">TOUCHING_HEADER</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mTouchState</span> <span class="o">=</span> <span class="n">TouchState</span><span class="o">.</span><span class="na">NONE</span><span class="o">;</span>
</span><span class='line'>        <span class="n">invalidate</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">captured</span> <span class="o">=</span> <span class="n">mViewToDraw</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mTouchState</span> <span class="o">==</span> <span class="n">TouchState</span><span class="o">.</span><span class="na">TOUCHING_HEADER</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">invalidate</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">captured</span> <span class="o">=</span> <span class="n">mViewToDraw</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">invalidate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">invalidate</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">getWidth</span><span class="o">(),</span> <span class="n">bottom</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">captured</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to use this solution, you will clearly need to improve my implementation.</p>

<h3>4th solution: Duplicate the Tabs view and just make it visible/invisible</h3>

<p>This is not a really great way to implement the sticky tabs but this will work and you will avoid  the calls to <code>requestLayout()</code></p>

<p>You will need to copy paste the tabs view in the header&rsquo;s xml and in the main view&rsquo;s xml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">setOnScrollListener</span><span class="o">(</span><span class="k">new</span> <span class="n">AbsListView</span><span class="o">.</span><span class="na">OnScrollListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onScroll</span><span class="o">(</span><span class="n">AbsListView</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">firstVisibleItem</span><span class="o">,</span> <span class="kt">int</span> <span class="n">visibleItemCount</span><span class="o">,</span> <span class="kt">int</span> <span class="n">totalItemCount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">visibleItemCount</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">shouldStick</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">view</span><span class="o">.</span><span class="na">getChildAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">!=</span> <span class="n">mHeader</span><span class="o">)</span> <span class="n">shouldStick</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">mHeader</span><span class="o">.</span><span class="na">getTop</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">tabsHeight</span> <span class="o">=</span> <span class="n">mHorizontalScrollView</span><span class="o">.</span><span class="na">getMeasuredHeight</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">headerViewHeight</span> <span class="o">=</span> <span class="n">mHeader</span><span class="o">.</span><span class="na">getMeasuredHeight</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">headerViewHeight</span> <span class="o">-</span> <span class="n">tabsHeight</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">delta</span> <span class="o">+</span> <span class="n">top</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">shouldStick</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//refresh the scrollY and the visibility</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">shouldStick</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mIsSticked</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mIsSticked</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mStickyTabs</span><span class="o">.</span><span class="na">setScrollY</span><span class="o">(</span><span class="n">mTabsInHeader</span><span class="o">.</span><span class="na">getScrollY</span><span class="o">());</span>
</span><span class='line'>            <span class="n">mStickyTabs</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">shouldStick</span> <span class="o">&amp;&amp;</span> <span class="n">mIsSticked</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mIsSticked</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mTabsInHeader</span><span class="o">.</span><span class="na">setScrollY</span><span class="o">(</span><span class="n">mStickyTabs</span><span class="o">.</span><span class="na">getScrollY</span><span class="o">());</span>
</span><span class='line'>            <span class="n">mStickyTabs</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">INVISIBLE</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note this solution is not a great solution because you have duplicate views, and you will have to set twice your clickListeners.</p>

<p>Here is the overdraw of the sticky tabs:</p>

<p><img class="center" src="http://antoine-merle.com/images/screen_gplus_tabs_overdraw.png" title="My design skills again" ></p>

<p>We can notice the view is drawn twice, so I bet they use the solution 3 or 4.</p>

<h1>Conclusion</h1>

<p>I showed you 4 ways to make this screen:</p>

<ol>
<li>The tabs are in the main view&rsquo;s xml, and we use the setTranslationY method to make it move (playing with margins on pre ICS devices)</li>
<li>The tabs are in the listview&rsquo;s header, and we change the tabs container&rsquo;s parent when we need to stick it (but this calls requestLayout twice)</li>
<li>The tabs are in the listview&rsquo;s header, and we just redraw them over the list when we need to stick them (but the touch events are pretty hard to implement)</li>
<li>The tabs are both in the main view and the listview&rsquo;s header, and we play with setVisibility(INVISIBLE|VISIBLE), but we have a duplicated view, and we need to set clickListeners twice for each tab.</li>
</ol>


<p>I was incapable to find a &lsquo;good&rsquo; way to implement that sticky tabs but if you have any idea, please do not hesitate to comment or contact me! And if you don&rsquo;t, then share it!</p>

<h1>Edit</h1>

<p>Thank you, <a href="https://plus.google.com/+WolframRittmeyer">Wolfram Rittmeyer</a> for suggesting me to use <a href="http://developer.android.com/tools/testing/testing_ui.html">uiautomatorviewer</a> and see how they actually make it in the google plus app. I discovered they use the solution #4. Indead, the tabs are in the header <strong>and</strong> in the <code>FrameLayout</code> containing the <code>ListView</code>. They just turn the visibility of the <code>HorizontalScrollView</code> to VISIBLE/INVISIBLE.</p>

<p><img class="center" src="http://antoine-merle.com/images/screen_gplus_uiautomatorviewer.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a Foreground Selector to a View/ViewGroup]]></title>
    <link href="http://antoine-merle.com/blog/2013/07/17/adding-a-foreground-selector-to-a-view/"/>
    <updated>2013-07-17T23:34:00+02:00</updated>
    <id>http://antoine-merle.com/blog/2013/07/17/adding-a-foreground-selector-to-a-view</id>
    <content type="html"><![CDATA[<p>Everyone has already seen the android cards touch feedback. The selector is drawn in the foreground instead of in the background (as we usually implement it). This effect is in fact pretty simple to implement, and is already implemented in some cases.</p>

<p>Here is a screenshot of the press state effect in the Google Play app:</p>

<p><img class="center" src="http://antoine-merle.com/images/screenshot_googleplay.png"></p>

<!-- more -->


<h1>I.  If your view is a <code>FrameLayout</code></h1>

<p>This is the easiest way to add a foreground selector because there is a <a href="http://developer.android.com/reference/android/widget/FrameLayout.html#setForeground(android.graphics.drawable.Drawable)">method</a> for that! Indeed, you just have to pass your selector as <code>android:foreground</code> in your xml or programmatically, calling <code>setForeground(Drawable)</code>.</p>

<h1>II. If your view is not a <code>FrameLayout</code></h1>

<p>Don&rsquo;t worry, this is pretty simple. Basically, we just have to set right state to the selector (pressed, focused, etc.), set the bounds and draw it after the view itself. In that way, the selector will be drawn after, and as a consequence, over the view.</p>

<h3>Changing the state</h3>

<p>In the <code>View</code> class, a method is called each time the state of the view changes. This method is <code>drawableStateChanged()</code> (<a href="http://developer.android.com/reference/android/view/View.html#drawableStateChanged()">DOC HERE</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">drawableStateChanged</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">drawableStateChanged</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mForegroundSelector</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="n">getDrawableState</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//redraw</span>
</span><span class='line'>  <span class="n">invalidate</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Updating the drawable bounds</h3>

<p>A method is called each time the size of the view changes. This method is <code>onSizeChanged(int, int, int, int)</code> (<a href="http://developer.android.com/reference/android/view/View.html#onSizeChanged(int,">DOC HERE</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onSizeChanged</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">,</span> <span class="kt">int</span> <span class="n">oldwidth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">oldheight</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onSizeChanged</span><span class="o">(</span><span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">,</span> <span class="n">oldwidth</span><span class="o">,</span> <span class="n">oldheight</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mForegroundSelector</span><span class="o">.</span><span class="na">setBounds</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Drawing the selector</h3>

<p>There is 2 cases:</p>

<h4>1.  Your view is a <strong>not</strong> a <code>ViewGroup</code></h4>

<p>The selector has to be drawn after calling <code>onDraw(Canvas canvas)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onDraw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mForegroundSelector</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.  Your view is a <code>ViewGroup</code></h4>

<p>The selector has to be drawn after all his children, that means after calling <code>dispatchDraw(Canvas canvas)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">dispatchDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">dispatchDraw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mForegroundSelector</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Drawing an animated Drawable</h1>

<p>If your drawable is animated, there is a bit more to do. Let&rsquo;s suppose that we have a selector with the attribute <code>android:exitFadeDuration</code>. That means when the selector changes its state, the old state will fade out.</p>

<p>We first have to move the draw method of the selector from <code>onDraw()</code> (for views) or <code>dispatchDraw()</code> (for ViewGroups) to the <code>draw(Canvas)</code> method, just like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mForegroundDrawable</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we have to Override <code>jumpDrawablesToCurrentState</code> to indicate our selector to do transition animations between states, and <code>verifyDrawable</code> to indicate the view we are displaying our own drawable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">verifyDrawable</span><span class="o">(</span><span class="n">Drawable</span> <span class="n">who</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">verifyDrawable</span><span class="o">(</span><span class="n">who</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">who</span> <span class="o">==</span> <span class="n">mForegroundDrawable</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@TargetApi</span><span class="o">(</span><span class="mi">11</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">jumpDrawablesToCurrentState</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">jumpDrawablesToCurrentState</span><span class="o">();</span>
</span><span class='line'>  <span class="n">mForegroundDrawable</span><span class="o">.</span><span class="na">jumpToCurrentState</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what is doing jumpToCurrentState()? Let&rsquo;s see a bit of source code, in the <code>DrawableContainer</code> class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">jumpToCurrentState</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">changed</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mLastDrawable</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mLastDrawable</span><span class="o">.</span><span class="na">jumpToCurrentState</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mLastDrawable</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">changed</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mCurrDrawable</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mCurrDrawable</span><span class="o">.</span><span class="na">jumpToCurrentState</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mCurrDrawable</span><span class="o">.</span><span class="na">mutate</span><span class="o">().</span><span class="na">setAlpha</span><span class="o">(</span><span class="n">mAlpha</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mExitAnimationEnd</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mExitAnimationEnd</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">changed</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mEnterAnimationEnd</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mEnterAnimationEnd</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">changed</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">changed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">invalidateSelf</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can notice that <code>jumpToCurrentState()</code> calls <code>invalidateSelf()</code>. And here is the <code>invalidateSelf()</code> method source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Use the current {@link Callback} implementation to have this Drawable</span>
</span><span class='line'><span class="cm"> * redrawn.  Does nothing if there is no Callback attached to the</span>
</span><span class='line'><span class="cm"> * Drawable.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @see Callback#invalidateDrawable</span>
</span><span class='line'><span class="cm"> * @see #getCallback() </span>
</span><span class='line'><span class="cm"> * @see #setCallback(android.graphics.drawable.Drawable.Callback) </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">invalidateSelf</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Callback</span> <span class="n">callback</span> <span class="o">=</span> <span class="n">getCallback</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">callback</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">callback</span><span class="o">.</span><span class="na">invalidateDrawable</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We clearly see that if the callback is not set, the drawable won&rsquo;t be redrawn.
So let&rsquo;s set a callback when we init our selector.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mForegroundDrawable</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getDrawable</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">myselector</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//set a callback, or the selector won&#39;t be animated</span>
</span><span class='line'>  <span class="n">mForegroundDrawable</span><span class="o">.</span><span class="na">setCallback</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your selector should fade out now!</p>

<h1>Pivot position</h1>

<p>If you tried to use a foreground <code>Ripple</code> drawable, you probably noticed that wherever you tap on your view, the animation will always start from the center.
The easiest way to manage this is to override the <a href="https://developer.android.com/reference/android/view/View.html#drawableHotspotChanged(float,">drawableHotspotChanged</a> method (<em>Api 21+</em>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">drawableHotspotChanged</span><span class="o">(</span><span class="kt">float</span> <span class="n">x</span><span class="o">,</span> <span class="kt">float</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">drawableHotspotChanged</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">mForegroundDrawable</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mForegroundDrawable</span><span class="o">.</span><span class="na">setHotspot</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to <a href="https://plus.google.com/+AlexLockwood/">+Alex Lockwood</a> for this :)</p>

<h1>EXTRA</h1>

<h3>Retrieve the default background, and set it as the foreground</h3>

<p>You can get the default background selector of your theme and set it as your foreground selector if you want:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">TypedArray</span> <span class="n">a</span> <span class="o">=</span> <span class="n">getContext</span><span class="o">().</span><span class="na">obtainStyledAttributes</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">attr</span><span class="o">.</span><span class="na">selectableItemBackground</span><span class="o">});</span>
</span><span class='line'><span class="n">mForegroundDrawable</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getDrawable</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">mForegroundDrawable</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mForegroundDrawable</span><span class="o">.</span><span class="na">setCallback</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h1>Conclusion</h1>

<p>I made here a basic example of how to add a foreground selector to a custom view, with the main methods. To see a complete implementation (Tests if the drawable is stateful, paddings, etc.), you can look at the source code of FrameLayout.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a multiple view types Adapter with Annotations]]></title>
    <link href="http://antoine-merle.com/blog/2013/06/11/making-a-multiple-view-type-adapter-with-annotations/"/>
    <updated>2013-06-11T19:49:00+02:00</updated>
    <id>http://antoine-merle.com/blog/2013/06/11/making-a-multiple-view-type-adapter-with-annotations</id>
    <content type="html"><![CDATA[<p>This post is more an introduction to java annotations than a tutorial about how to create an adapter able to show different rows. I won&rsquo;t describe how to implement a custom <code>Adapter</code>. Indeed, <code>ListView</code>s and <code>Adapter</code>s are common things in Android and you can easily find a <a href="http://castorflex.github.io/listview-optimisations-part-1-the-viewholder/">tutorial</a> about such components.</p>

<p>TLDR: I made a <a href="https://gist.github.com/castorflex/5776863">GIST</a>.</p>

<!-- more -->


<h1>Delegates</h1>

<p>Today I faced a problem. I needed a <code>ListView</code> able to display many different types of row. This is the common implementation of the <code>getView</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getViewTypeCount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fNUM_TYPES</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="n">etc</span><span class="o">...){</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">convertView</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>      <span class="k">switch</span><span class="o">(</span><span class="n">getItemViewType</span><span class="o">(</span><span class="n">position</span><span class="o">)){</span>
</span><span class='line'>          <span class="c1">//ugly things happen here…</span>
</span><span class='line'>          <span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="c1">//create view 0 + viewHolder0 and other stuff</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="c1">//create view 1 + viewHolder1 and other stuff</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="c1">//create view 2 + viewHolder2 and other stuff</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="c1">//ok you get it</span>
</span></code></pre></td></tr></table></div></figure>


<p>This implementation works well if you have max 2 types of rows (ok, you will have 2 in most cases, with sections and items), but if you have more types, your <code>getView(…)</code> is going to be hard to read and maintain.</p>

<p>The first idea is to create custom classes in which we can delegate the <code>getView</code>.</p>

<p>Create an interface called <code>DelegateAdapter</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DelegateAdapter</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">convertView</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">,</span> <span class="n">LayoutInflater</span> <span class="n">inflater</span><span class="o">,</span> <span class="n">Object</span> <span class="n">item</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you have to create a custom class implementing DelegateAdapter for each type you can have in your list. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleTextDelegateAdapter</span> <span class="kd">implements</span> <span class="n">DelegateAdapter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">convertView</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">,</span> <span class="n">LayoutInflater</span> <span class="n">inflater</span><span class="o">,</span> <span class="n">Object</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">convertView</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>          <span class="c1">//same as always… create your view, set a viewholder, etc.</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can call the right delegate on your <code>getView()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getViewTypeCount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mDelegateAdapterSparseArray</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(...){</span>
</span><span class='line'>  <span class="k">switch</span><span class="o">(</span><span class="n">getItemViewType</span><span class="o">(</span><span class="n">position</span><span class="o">)){</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="k">return</span> <span class="n">mDelegate0</span><span class="o">.</span><span class="na">getView</span><span class="o">(</span><span class="err">…</span><span class="o">)</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="k">return</span> <span class="n">mDelegate1</span><span class="o">.</span><span class="na">getView</span><span class="o">(</span><span class="err">…</span><span class="o">)</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="k">return</span> <span class="n">mDelegate2</span><span class="o">.</span><span class="na">getView</span><span class="o">(</span><span class="err">…</span><span class="o">)</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="k">return</span> <span class="n">mDelegate3</span><span class="o">.</span><span class="na">getView</span><span class="o">(</span><span class="err">…</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok that&rsquo;s better but we still have our switch case… Let&rsquo;s create a <code>LongSparseArray</code> (<a href="http://developer.android.com/reference/android/support/v4/util/LongSparseArray.html">what is this?</a>) to get rid of this switch.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span>   <span class="n">LongSparseArray</span><span class="o">&lt;</span><span class="n">DelegateAdapter</span><span class="o">&gt;</span> <span class="n">mDelegateAdapterSparseArray</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Constructor</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">MyCustomAdapter</span><span class="o">(...){</span>
</span><span class='line'>  <span class="c1">//some initializations…</span>
</span><span class='line'>  <span class="n">initDelegates</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initDelegates</span><span class="o">(){</span>
</span><span class='line'>  <span class="n">mDelegateAdapterSparseArray</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LongSparseArray</span><span class="o">&lt;</span><span class="n">DelegateAdapter</span><span class="o">&gt;();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//the first parameter represents the ItemViewType</span>
</span><span class='line'>  <span class="n">mDelegateAdapterSparseArray</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="k">new</span> <span class="n">SimpleTextDelegateAdapter</span><span class="o">());</span>
</span><span class='line'>  <span class="n">mDelegateAdapterSparseArray</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="k">new</span> <span class="n">HtmlTextDelegateAdapter</span><span class="o">());</span>
</span><span class='line'>  <span class="n">mDelegateAdapterSparseArray</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="k">new</span> <span class="n">GalleryDelegateAdapter</span><span class="o">());</span>
</span><span class='line'>  <span class="c1">//etc.</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(...){</span>
</span><span class='line'>  <span class="n">DelegateAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="n">mDelegateAdapterSparseArray</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">getItemViewType</span><span class="o">(</span><span class="n">position</span><span class="o">));</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">adapter</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>      <span class="n">convertView</span> <span class="o">=</span> <span class="n">adapter</span><span class="o">.</span><span class="na">getView</span><span class="o">(</span><span class="err">…</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>      <span class="c1">//default case! this should not happen :p</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">convertView</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok we could stop there, but I never created java annotations and I&rsquo;m very curious… so I found a way to use it in that case.</p>

<h1>Annotations</h1>

<p>Annotations are created with the <code>@interface</code> keyword. For each annotation you can define some parameters:</p>

<ul>
<li><p><code>@Target</code> can specify the place your annotation can be used (as a class header, method header, etc.).</p></li>
<li><p><code>@Retention</code> specify how long your annotation will live. It can be <code>SOURCE</code>, <code>CLASS</code> or <code>RUNTIME</code>.</p></li>
<li><code>SOURCE</code>: The annotations are not saved in <code>*.class</code> files.</li>
<li><code>CLASS</code>:  The annotations are saved in <code>*.class</code> files, but can&rsquo;t be used by the VM. <em>(default parameter)</em></li>
<li><code>RUNTIME</code>: Annotations save in <code>*.class</code> and can be used in runtime. Since we will use reflection, we need this parameter.</li>
</ul>


<p>Please note that I&rsquo;m showing you one way to do this but there are plenty.</p>

<p>We will need 2 different annotations:</p>

<ul>
<li><p><code>@DelegateAdapters</code>: used on our <code>BaseAdapter</code> to indicate which adapters to delegate the <code>getView</code>. It will take the delegate classes as parameter.</p></li>
<li><p><code>@DelegateAdapterType</code>: used on our <code>DelegateAdapter</code>s implementations. This annotation take as parameter his <code>itemViewType</code> associated.</p></li>
</ul>


<p><code>DelegateAdapters</code> Annotation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span>    
</span><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">DelegateAdapters</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">DelegateAdapter</span><span class="o">&gt;[]</span> <span class="n">delegateAdapters</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>DelegateAdapterType</code> Annotation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">DelegateAdapterType</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">long</span> <span class="nf">itemType</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Note:</em></strong> <em>You can set the itemType as optional if you set a default value:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">long</span> <span class="nf">itemType</span><span class="o">()</span> <span class="k">default</span> <span class="mi">0</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will use our annotations like that:</p>

<p>In our base adapter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@DelegateAdapters</span><span class="o">(</span><span class="n">delegateAdapters</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">SimpleTextDelegateAdapter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>      <span class="n">HtmlTextDelegateAdapter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>      <span class="n">GalleryDelegateAdapter</span><span class="o">.</span><span class="na">class</span>
</span><span class='line'><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCustomAdapter</span> <span class="kd">extends</span> <span class="n">BaseAdapter</span><span class="o">{</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in our delegates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@DelegateAdapterType</span><span class="o">(</span><span class="n">itemType</span> <span class="o">=</span> <span class="mi">0</span><span class="o">)</span> <span class="c1">//note that you can use constants</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleTextDelegateAdapter</span> <span class="kd">implements</span> <span class="n">DelegateAdapter</span> <span class="o">{</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@DelegateAdapterType</span><span class="o">(</span><span class="n">itemType</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span> <span class="c1">//note that you can use constants</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HtmlTextDelegateAdapter</span> <span class="kd">implements</span> <span class="n">DelegateAdapter</span> <span class="o">{</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@DelegateAdapterType</span><span class="o">(</span><span class="n">itemType</span> <span class="o">=</span> <span class="mi">2</span><span class="o">)</span> <span class="c1">//note that you can use constants</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GalleryDelegateAdapter</span> <span class="kd">implements</span> <span class="n">DelegateAdapter</span> <span class="o">{</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our adapters are ready, we just need to initialize the SparseArray using reflection in the Base Adapter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initDelegates</span><span class="o">(){</span>
</span><span class='line'>  <span class="n">mDelegateAdapterSparseArray</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LongSparseArray</span><span class="o">&lt;</span><span class="n">DelegateAdapter</span><span class="o">&gt;();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//get the annotation containing all the delegate classes</span>
</span><span class='line'>  <span class="n">DelegateAdapters</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">getClass</span><span class="o">().</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">DelegateAdapters</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Class</span><span class="o">[]</span> <span class="n">clazzs</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">delegateAdapters</span><span class="o">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">:</span> <span class="n">clazzs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">DelegateAdapterType</span> <span class="n">delegateAdapterAnnotation</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">DelegateAdapterType</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">//check if each delegate has an itemType</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">delegateAdapterAnnotation</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>              <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;The class &quot;</span><span class="o">+</span><span class="n">clazz</span><span class="o">.</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot; should have the annotation DelegateAdapterType&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="kt">long</span> <span class="n">itemtype</span> <span class="o">=</span> <span class="n">delegateAdapterAnnotation</span><span class="o">.</span><span class="na">itemType</span><span class="o">();</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">mDelegateAdapterSparseArray</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">itemtype</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>              <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;The item type &quot;</span><span class="o">+</span><span class="n">itemtype</span><span class="o">+</span><span class="s">&quot; is already defined!&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//instantiate with the default constructor</span>
</span><span class='line'>          <span class="n">DelegateAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">adapter</span> <span class="o">=</span> <span class="o">(</span><span class="n">DelegateAdapter</span><span class="o">)</span> <span class="n">clazz</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Error while instantiating &quot;</span><span class="o">+</span><span class="n">clazz</span><span class="o">.</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot; with default constructor: &quot;</span><span class="o">+</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//final step!</span>
</span><span class='line'>          <span class="n">mDelegateAdapterSparseArray</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">itemtype</span><span class="o">,</span> <span class="n">adapter</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>I hope you found it interesting. Please note this is my first custom annotation, so don&rsquo;t hesitate to tell me (via comments / g+ / twitter, etc.) if you have any remark.</p>

<p>TLDR: I made a <a href="https://gist.github.com/castorflex/5776863">GIST</a>. Check it out and don&rsquo;t hesitate to modify it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flip your ImageViews]]></title>
    <link href="http://antoine-merle.com/blog/2013/04/16/flip-your-imageviews/"/>
    <updated>2013-04-16T20:06:00+02:00</updated>
    <id>http://antoine-merle.com/blog/2013/04/16/flip-your-imageviews</id>
    <content type="html"><![CDATA[<p>This post will be cut in two parts. In the first part, I&rsquo;ll present my small android library <a href="https://github.com/castorflex/FlipImageView">FlipImageView</a> which allows you to create easily an <code>ImageView</code> which can turn into another <code>Drawable</code>. Then I&rsquo;ll show you how the animation is performed and how you can modify it.</p>

<p>You can download a sample app <a href="https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview">on the store</a> if you want to see what it looks like.</p>

<!-- more -->


<h2>FlipImageView Library</h2>

<p>As I needed it, I recently created a very small lib called <code>FlipImageView</code> available on <a href="https://github.com/castorflex/FlipImageView">Github</a>. This lib is based on <a href="https://code.google.com/p/myandroidwidgets/source/browse/trunk/FlipAnimatorExample/src/com/beanie/examples/animation/FlipAnimator/FlipAnimator.java">FlipAnimator</a>, made by Coomar, so all credits goes to him.</p>

<p><code>FlipImageView extends ImageView</code>, that means if you have your own custom <code>ImageView</code>, I suggest you to extend <code>FlipImageView</code>, or look at the source code and take the animation part.</p>

<p>There are two ways to create your FlipImageView:</p>

<ul>
<li>Via XML</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;fr.castorflex.android.flipimageview.library.FlipImageView</span>
</span><span class='line'>   <span class="na">xmlns:fiv=</span><span class="s">&quot;http://schemas.android.com/apk/res-auto&quot;</span>
</span><span class='line'>   <span class="na">android:id=</span><span class="s">&quot;@+id/imageview&quot;</span>
</span><span class='line'>   <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>   <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>   <span class="na">android:src=</span><span class="s">&quot;@drawable/YOUR_DEFAULT_DRAWABLE&quot;</span>
</span><span class='line'>   <span class="na">fiv:flipDrawable=</span><span class="s">&quot;@drawable/YOUR_FLIPPED_DRAWABLE&quot;</span>
</span><span class='line'>   <span class="na">fiv:flipDuration=</span><span class="s">&quot;YOUR_DURATION_IN_MS&quot;</span>
</span><span class='line'>   <span class="na">fiv:flipInterpolator=</span><span class="s">&quot;@android:anim/YOUR_INTERPOLATOR&quot;</span>
</span><span class='line'>   <span class="na">fiv:flipRotations=</span><span class="s">&quot;none|x|y|z&quot;</span>
</span><span class='line'>   <span class="na">fiv:isAnimated=</span><span class="s">&quot;true|false&quot;</span>
</span><span class='line'>   <span class="na">fiv:isFlipped=</span><span class="s">&quot;true|false&quot;</span>
</span><span class='line'>   <span class="na">fiv:reverseRotation=</span><span class="s">&quot;true|false&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>Or programmatically</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Standard way</span>
</span><span class='line'><span class="n">FlipImageView</span> <span class="n">fiv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FlipImageView</span><span class="o">(</span><span class="n">mContext</span><span class="o">);</span>
</span><span class='line'><span class="n">fiv</span><span class="o">.</span><span class="na">setDrawable</span><span class="o">(</span><span class="n">mDrawable</span><span class="o">);</span>    <span class="c1">//Note that this is different from setImageDrawable(...)</span>
</span><span class='line'><span class="n">fiv</span><span class="o">.</span><span class="na">setFlippedDrawable</span><span class="o">(</span><span class="n">mDrawable</span><span class="o">);</span>
</span><span class='line'><span class="n">fiv</span><span class="o">.</span><span class="na">setIsFlipped</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="c1">//etc.</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Note:</em></strong> <em>setDrawable is different from setImageDrawable which one will set directly the drawable to the ImageView.</em></p>

<p>You can disable the flip animation by calling <code>setAnimated(false)</code>.</p>

<p>The flip animation will be launched each time you click on the image. You can of course call it programmatically, with <code>toggleFlip()</code> method or <code>setFlipped(boolean flipped)</code> method. You can also Override onClick or set another <code>View.OnClickListener</code> if you do not want the image view to flip when clicked.</p>

<p>You can set a <code>OnFlipListener</code> to your FlipImageView. Three events will be triggered:</p>

<ol>
<li><code>onClick(FlipImageView flipImageView)</code>: called when the imageView is clicked</li>
<li><code>onFlipStart(FlipImageView flipImageView)</code> : called at the beginning of the flip animation</li>
<li><code>onFlipEnd(FlipImageView flipImageView)</code>: called at the end of the animation</li>
</ol>


<p><strong><em>Note:</em></strong> <em>onFlipStart and OnFlipEnd won&rsquo;t be called if you disabled the flip animation.</em></p>

<p>You can also reverse the animation, for example if you want your ImageView to flip in the other direction, to make a &ldquo;flip back&rdquo; transition. To do that, just call <code>setRotationReversed(true)</code> every time you flip your image.</p>

<p>You can enable/disable x, y and z rotation axis via xml or programmatically too.</p>

<p>I strongly recommend you to play with existing <code>interpolators</code> (bounce/overshoot are funny :p) or to create new ones. You could be surprised by the effect :p</p>

<h2>How does this work?</h2>

<p>Here is the transformation part:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">applyTransformation</span><span class="o">(</span><span class="kt">float</span> <span class="n">interpolatedTime</span><span class="o">,</span> <span class="n">Transformation</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Angle around the y-axis of the rotation at the given time. It is</span>
</span><span class='line'>    <span class="c1">// calculated both in radians and in the equivalent degrees.</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">double</span> <span class="n">radians</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">PI</span> <span class="o">*</span> <span class="n">interpolatedTime</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">degrees</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="o">(</span><span class="mf">180.0</span> <span class="o">*</span> <span class="n">radians</span> <span class="o">/</span> <span class="n">Math</span><span class="o">.</span><span class="na">PI</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Once we reach the midpoint in the animation, we need to hide the</span>
</span><span class='line'>    <span class="c1">// source view and show the destination view. We also need to change</span>
</span><span class='line'>    <span class="c1">// the angle by 180 degrees so that the destination does not come in</span>
</span><span class='line'>    <span class="c1">// flipped around.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">interpolatedTime</span> <span class="o">&gt;=</span> <span class="mf">0.5f</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">degrees</span> <span class="o">-=</span> <span class="mi">180</span><span class="o">.</span><span class="na">f</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">visibilitySwapped</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">setImageDrawable</span><span class="o">(</span><span class="n">toDrawable</span><span class="o">);</span>
</span><span class='line'>            <span class="n">visibilitySwapped</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mIsRotationReversed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">degrees</span> <span class="o">=</span> <span class="o">-</span><span class="n">degrees</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Matrix</span> <span class="n">matrix</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">getMatrix</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">camera</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//We make a small translation in z axis, this is a cool effect :)</span>
</span><span class='line'>    <span class="c1">//Note that you can custom this too, by making a translation in the </span>
</span><span class='line'>    <span class="c1">// other direction for example, to make the image move in the foreground</span>
</span><span class='line'>    <span class="n">camera</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="mf">0.0f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="o">(</span><span class="mf">150.0</span> <span class="o">*</span> <span class="n">Math</span><span class="o">.</span><span class="na">sin</span><span class="o">(</span><span class="n">radians</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//rotations</span>
</span><span class='line'>    <span class="n">camera</span><span class="o">.</span><span class="na">rotateX</span><span class="o">(</span><span class="n">mIsRotationXEnabled</span> <span class="o">?</span> <span class="n">degrees</span> <span class="o">:</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">camera</span><span class="o">.</span><span class="na">rotateY</span><span class="o">(</span><span class="n">mIsRotationYEnabled</span> <span class="o">?</span> <span class="n">degrees</span> <span class="o">:</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">camera</span><span class="o">.</span><span class="na">rotateZ</span><span class="o">(</span><span class="n">mIsRotationZEnabled</span> <span class="o">?</span> <span class="n">degrees</span> <span class="o">:</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">camera</span><span class="o">.</span><span class="na">getMatrix</span><span class="o">(</span><span class="n">matrix</span><span class="o">);</span>
</span><span class='line'>    <span class="n">camera</span><span class="o">.</span><span class="na">restore</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">matrix</span><span class="o">.</span><span class="na">preTranslate</span><span class="o">(-</span><span class="n">centerX</span><span class="o">,</span> <span class="o">-</span><span class="n">centerY</span><span class="o">);</span>
</span><span class='line'>    <span class="n">matrix</span><span class="o">.</span><span class="na">postTranslate</span><span class="o">(</span><span class="n">centerX</span><span class="o">,</span> <span class="n">centerY</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, I think the code is pretty clear (I added some comments too). Do not hesitate to custom the animation by trying some interpolators or modifying directly the <code>applyTransformation</code> method!</p>

<h2>Conclusion</h2>

<p>That was a pretty short post to introduce my lib, but I&rsquo;m sure some guys will be happy to discover that kind of small tricks which can make your app better. But however, please do not make all your controls animated, just when needed, or your app will be really annoying.</p>

<p>Do not hesitate to contribute to the <a href="https://github.com/castorflex/FlipImageView">Lib</a> or to this <a href="https://github.com/castorflex/castorflex-blog/blob/master/source/_posts/2013-04-16-flip-your-imageviews.markdown">article</a> by leaving comments or making pull requests. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a bouncing animation for your sliding menu]]></title>
    <link href="http://antoine-merle.com/blog/2013/04/12/making-a-bounce-animation-for-your-sliding-menu/"/>
    <updated>2013-04-12T13:35:00+02:00</updated>
    <id>http://antoine-merle.com/blog/2013/04/12/making-a-bounce-animation-for-your-sliding-menu</id>
    <content type="html"><![CDATA[<p>The Sliding Menu, aka Fly in App Menu, appeared about one year ago (<code>@see</code> <a href="https://play.google.com/store/apps/details?id=fr.epicdream.beamy">Prixing</a>, <a href="https://play.google.com/store/apps/details?id=com.facebook.katana">Facebook</a>, etc.). Because of the ease of use and the effectiveness, the users quickly adopted this UI pattern. You can read more about this pattern <a href="http://www.androiduipatterns.com/2012/06/emerging-ui-pattern-side-navigation.html">here</a>.</p>

<p>One of the cons of this pattern is the fact that it&rsquo;s hidden, so you need to inform the user he can open it. There are many ways to do this, such as guides, but there is a convenient way to do this, which is a bouncing animation when the application is first launched. That&rsquo;s what we are going to talk.</p>

<!-- more -->


<p>The bouncing animation is used by Prixing, and I think this is a very good way to introduce the menu, because it does not require any popups, tutorials, or whatever that can be so annoying for the user. If you do not know what I am talking about, I strongly suggest you to download Prixing and look at the first launch.</p>

<p>I made a sample apk showing this effect. This should be available <a href="https://play.google.com/store/apps/details?id=fr.castorflex.android.BounceSlidingMenuProject">here</a>.</p>

<h2>Interpolators</h2>

<p>From the <a href="http://developer.android.com/reference/android/view/animation/Interpolator.html">DOC</a>:</p>

<blockquote><p>An interpolator defines the rate of change of an animation. This allows the basic animation effects (alpha, scale, translate, rotate) to be accelerated, decelerated, repeated, etc.</p></blockquote>

<p>But how?</p>

<p>An <code>Interpolator</code> is a function defined on [0,1], returning a value, generally between 0 and 1. The animation will use an <code>Interpolator</code> to interpolate as many values as the number of the frames needed during the animation. For example, if you have a 2 sec. animation, and a 30 fps screen, you will need 60 values.</p>

<p>There is some native interpolators:</p>

<p><img class="center" src="http://antoine-merle.com/images/interpolators.png"></p>

<p>The problem here with the sdk interpolators, is that they create values from 0 (for t=0) to x (for t=1). As the sliding menu needs to be closed at the end of the animation, we need to create a custom bounce interpolator. Here is the function:</p>

<p>$$
\begin{align}
\mbox f(t) = abs(sin(pi * (t+1)²) * (1-t) \
\end{align}
$$</p>

<p><img class="center" src="http://antoine-merle.com/images/interpolators2.png"></p>

<h2>Bouncing Animation with Sliding Menu</h2>

<blockquote><p>TL;DR; All you need is a <a href="https://gist.github.com/castorflex/5337238">GIST</a></p></blockquote>

<p>This part will talk about the implementation of the bouncing animation on the android lib <code>SlidingMenu</code> (credits to Jeremy Feinstein) available <a href="https://github.com/jfeinstein10/SlidingMenu">on Github</a>.</p>

<p>This lib uses a <code>Scroller</code> to make the menu slide. The problem with this class is that it requires a final position, used for the interpolation AND for the end of the animation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//in computeScrollOffset method     </span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">timePassed</span> <span class="o">&lt;</span> <span class="n">mDuration</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>  <span class="c1">//end of the animation</span>
</span><span class='line'>  <span class="n">mCurrX</span> <span class="o">=</span> <span class="n">mFinalX</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mCurrY</span> <span class="o">=</span> <span class="n">mFinalY</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mFinished</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We do not want to set the final position at the end of the animation, but 0. The easier way to do this (I think) is to copy paste the Scroller class and add a way to set the final position:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* New startScroll method, with a finalX and finalY</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">startScroll</span><span class="o">(</span><span class="kt">int</span> <span class="n">startX</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startY</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dx</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dy</span><span class="o">,</span> <span class="kt">int</span> <span class="n">duration</span><span class="o">,</span> <span class="kt">int</span> <span class="n">finalX</span><span class="o">,</span> <span class="kt">int</span> <span class="n">finalY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mMode</span> <span class="o">=</span> <span class="n">SCROLL_MODE</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mFinished</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mDuration</span> <span class="o">=</span> <span class="n">duration</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mStartTime</span> <span class="o">=</span> <span class="n">AnimationUtils</span><span class="o">.</span><span class="na">currentAnimationTimeMillis</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mStartX</span> <span class="o">=</span> <span class="n">startX</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mStartY</span> <span class="o">=</span> <span class="n">startY</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mThresholdX</span> <span class="o">=</span> <span class="n">startX</span> <span class="o">+</span> <span class="n">dx</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mThresholdY</span> <span class="o">=</span> <span class="n">startY</span> <span class="o">+</span> <span class="n">dy</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mDeltaX</span> <span class="o">=</span> <span class="n">dx</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mDeltaY</span> <span class="o">=</span> <span class="n">dy</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mDurationReciprocal</span> <span class="o">=</span> <span class="mf">1.0f</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">mDuration</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mFinalX</span> <span class="o">=</span> <span class="n">finalX</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mFinalY</span> <span class="o">=</span> <span class="n">finalY</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Old startScroll method</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">startScroll</span><span class="o">(</span><span class="kt">int</span> <span class="n">startX</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startY</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dx</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dy</span><span class="o">,</span> <span class="kt">int</span> <span class="n">duration</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">startScroll</span><span class="o">(</span><span class="n">startX</span><span class="o">,</span> <span class="n">startY</span><span class="o">,</span> <span class="n">dx</span><span class="o">,</span> <span class="n">dy</span><span class="o">,</span> <span class="n">duration</span><span class="o">,</span> <span class="n">startX</span> <span class="o">+</span> <span class="n">dx</span><span class="o">,</span> <span class="n">startY</span> <span class="o">+</span> <span class="n">dy</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also have to set the appropriate value when the animation is done, and remove a the following test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">mCurrX</span> <span class="o">==</span> <span class="n">mThresholdX</span> <span class="o">&amp;&amp;</span> <span class="n">mCurrY</span> <span class="o">==</span> <span class="n">mThresholdY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mFinished</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Indeed, as we are waiting for the end of the animation, we don&rsquo;t want to stop if we reach the threshold.</p>

<p>Then modify the Sliding Menu lib to use the new scroller:</p>

<p><code>SlidingMenu.java</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">scrollWithBounceInterpolator</span><span class="o">(){</span>
</span><span class='line'>  <span class="n">mViewAbove</span><span class="o">.</span><span class="na">scrollWithBounceInterpolator</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>CustomViewAbove.java</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">scrollWithBounceInterpolator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">mViewBehind</span><span class="o">.</span><span class="na">getBehindWidth</span><span class="o">();</span> <span class="c1">//or whatever you want :D</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">getChildCount</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Nothing to do.</span>
</span><span class='line'>      <span class="n">setScrollingCacheEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sx</span> <span class="o">=</span> <span class="n">getScrollX</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sy</span> <span class="o">=</span> <span class="n">getScrollY</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">dx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">sx</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">dy</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="n">sy</span><span class="o">;</span>
</span><span class='line'>  <span class="n">mBounceScroller</span><span class="o">.</span><span class="na">startScroll</span><span class="o">(</span><span class="n">sx</span><span class="o">,</span> <span class="n">sy</span><span class="o">,</span> <span class="n">dx</span><span class="o">,</span> <span class="n">dy</span><span class="o">,</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>  <span class="n">invalidate</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>add the following on the <code>computeScroll</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">mBounceScroller</span><span class="o">.</span><span class="na">isFinished</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">mBounceScroller</span><span class="o">.</span><span class="na">computeScrollOffset</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">mBounceScroller</span><span class="o">.</span><span class="na">getCurrX</span><span class="o">();</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">mBounceScroller</span><span class="o">.</span><span class="na">getCurrY</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">scrollTo</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// Keep on drawing until the animation has finished.</span>
</span><span class='line'>      <span class="n">invalidate</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should now be able to call <code>mSlidingMenu.scrollWithBounceInterpolator()</code> from your activity!</p>

<h2>Conclusion</h2>

<p>The sources of my posts are on <a href="https://github.com/castorflex/castorflex-blog/blob/master/source/_posts/2013-04-12-making-a-bounce-animation-for-your-sliding-menu.markdown">Github</a>, so do not hesitate to contribute by making pull requests, etc.</p>

<p>TL;DR; I made a gist with all that you need! <a href="https://gist.github.com/castorflex/5337238">GIST</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Makeover]]></title>
    <link href="http://antoine-merle.com/blog/2013/04/12/makeover/"/>
    <updated>2013-04-12T13:24:00+02:00</updated>
    <id>http://antoine-merle.com/blog/2013/04/12/makeover</id>
    <content type="html"><![CDATA[<p>This small post, just to inform you that I just moved my blog from wordpress to this awesome <a href="http://octopress.org/">Octopress</a>, with <a href="https://github.com/tommy351/Octopress-Theme-Slash">Slash</a> theme.</p>

<p>I know I didn&rsquo;t posted any tuts for a long time, but I hope this makeover will motivate me again.
Due to some laziness and limitations, my next posts will be english only.</p>

<p>This blog is now available on <a href="https://github.com/castorflex/castorflex-blog">github</a>, so do not hesitate to make some pull requests if you want to contrib, or fork it =)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ListView optimisations : Part 2 (Displaying images in your lists)]]></title>
    <link href="http://antoine-merle.com/listview-optimisations-part-2-displaying-images-in-your-lists/"/>
    <updated>2012-11-21T00:00:00+01:00</updated>
    <id>http://antoine-merle.com/listview-optimisations-part-2-displaying-images-in-your-lists</id>
    <content type="html"><![CDATA[<h1></h1>

<p>This second post about listview optimisations will talk about the images in your lists. This post is an extension of the first, which one was about the viewholder :</p>

<ul>
<li><a href="http://antoine-merle.com/listview-optimisations-part-1-the-viewholder/" title="ListView optimisations : Part 1 (the ViewHolder)">ListView opimisation : Part 1 (the ViewHolder)</a> : The viewholder is essential when you make a listView. See this post first.</li>
</ul>


<!-- more -->


<h2>I.    The ImageLoader</h2>

<p>We will create a class which will do all the job (here is the skeleton):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ImageLoader</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">ImageLoader</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">displayImage</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">,</span> <span class="n">ImageView</span> <span class="n">imageView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And how to use it in your adapter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyAdapter</span> <span class="kd">extends</span> <span class="n">BaseAdapter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="n">LayoutInflater</span> <span class="n">mLayoutInflater</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">List</span> <span class="n">mData</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">ImageLoader</span> <span class="n">mImageLoader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">MyAdapter</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">List</span> <span class="n">data</span><span class="o">){</span>
</span><span class='line'>            <span class="n">mData</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mLayoutInflater</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mImageLoader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageLoader</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">mData</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span>  <span class="o">:</span> <span class="n">mData</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">MyPojo</span> <span class="nf">getItem</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">mData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getItemId</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">position</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">View</span> <span class="n">vi</span> <span class="o">=</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>            <span class="n">ViewHolder</span> <span class="n">holder</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">vi</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">vi</span> <span class="o">=</span> <span class="n">mLayoutInflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">item</span><span class="o">,</span> <span class="n">parent</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>                <span class="n">holder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ViewHolder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">holder</span><span class="o">.</span><span class="na">ivIcon</span> <span class="o">=</span> <span class="o">(</span><span class="n">ImageView</span><span class="o">)</span> <span class="n">vi</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">imageView_item_icon</span><span class="o">);</span>
</span><span class='line'>                <span class="n">vi</span><span class="o">.</span><span class="na">setTag</span><span class="o">(</span><span class="n">holder</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">holder</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewHolder</span><span class="o">)</span> <span class="n">vi</span><span class="o">.</span><span class="na">getTag</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">MyPojo</span> <span class="n">item</span> <span class="o">=</span> <span class="n">getItem</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">mImageLoader</span><span class="o">.</span><span class="na">displayImage</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getIcon</span><span class="o">(),</span> <span class="n">holder</span><span class="o">.</span><span class="na">icon</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="n">vi</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ViewHolder</span><span class="o">{</span>
</span><span class='line'>            <span class="n">ImageView</span> <span class="n">ivIcon</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A simple picture to understand the role of the ImageLoader:<br/>
<img class="center" src="http://antoine-merle.com/images/imageloader.png"><br/>
And his code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ImageLoader</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="n">LruCache</span> <span class="n">memoryCache</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">FileCache</span> <span class="n">fileCache</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">Map</span> <span class="n">imageViews</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedMap</span><span class="o">(</span><span class="k">new</span> <span class="n">WeakHashMap</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="n">Drawable</span> <span class="n">mStubDrawable</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">ImageLoader</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fileCache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileCache</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>            <span class="n">init</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Get memory class of this device, exceeding this amount will throw an</span>
</span><span class='line'>            <span class="c1">// OutOfMemory exception.</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">int</span> <span class="n">memClass</span> <span class="o">=</span> <span class="o">((</span><span class="n">ActivityManager</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">Context</span><span class="o">.</span><span class="na">ACTIVITY_SERVICE</span><span class="o">)).</span><span class="na">getMemoryClass</span><span class="o">();</span>
</span><span class='line'>            <span class="c1">// 1/8 of the available mem</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">int</span> <span class="n">cacheSize</span> <span class="o">=</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="n">memClass</span> <span class="o">/</span> <span class="mi">8</span><span class="o">;</span>
</span><span class='line'>            <span class="n">memoryCache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LruCache</span><span class="o">(</span><span class="n">cacheSize</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">mStubDrawable</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getResources</span><span class="o">().</span><span class="na">getDrawable</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">default_icon</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">displayImage</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">,</span> <span class="n">ImageView</span> <span class="n">imageView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">imageViews</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">imageView</span><span class="o">,</span> <span class="n">url</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">url</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">url</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="o">)</span>
</span><span class='line'>                <span class="n">bitmap</span> <span class="o">=</span> <span class="o">(</span><span class="n">Bitmap</span><span class="o">)</span> <span class="n">memoryCache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">bitmap</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//the image is in the LRU Cache, we can use it directly</span>
</span><span class='line'>                <span class="n">imageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//the image is not in the LRU Cache</span>
</span><span class='line'>                <span class="c1">//set a default drawable a search the image</span>
</span><span class='line'>                <span class="n">imageView</span><span class="o">.</span><span class="na">setImageDrawable</span><span class="o">(</span><span class="n">mStubDrawable</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">url</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">url</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="o">)</span>
</span><span class='line'>                    <span class="n">queuePhoto</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">imageView</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">void</span> <span class="nf">queuePhoto</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">,</span> <span class="n">ImageView</span> <span class="n">imageView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">LoadBitmapTask</span><span class="o">().</span><span class="na">execute</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">imageView</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Search for the image in the device, then in the web</span>
</span><span class='line'><span class="cm">         * @param url</span>
</span><span class='line'><span class="cm">         * @return</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">Bitmap</span> <span class="nf">getBitmap</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Bitmap</span> <span class="n">ret</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="c1">//from SD cache</span>
</span><span class='line'>            <span class="n">File</span> <span class="n">f</span> <span class="o">=</span> <span class="n">fileCache</span><span class="o">.</span><span class="na">getFile</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">exists</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ret</span> <span class="o">=</span> <span class="n">decodeFile</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//from web</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//your requester will fetch the bitmap from the web and store it in the phone using the fileCache</span>
</span><span class='line'>                <span class="n">ret</span> <span class="o">=</span> <span class="n">MyRequester</span><span class="o">.</span><span class="na">getBitmapFromWebAndStoreItInThePhone</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>    <span class="c1">// your own requester here</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">([</span><span class="n">Exception</span><span class="o">][</span><span class="mi">8</span><span class="o">]</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//decodes image and scales it to reduce memory consumption</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">Bitmap</span> <span class="nf">decodeFile</span><span class="o">(</span><span class="n">File</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Bitmap</span> <span class="n">ret</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="o">[</span><span class="n">FileInputStream</span><span class="o">][</span><span class="mi">9</span><span class="o">]</span> <span class="n">is</span> <span class="o">=</span> <span class="k">new</span> <span class="o">[</span><span class="n">FileInputStream</span><span class="o">][</span><span class="mi">9</span><span class="o">](</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>                <span class="n">ret</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeStream</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">([</span><span class="n">FileNotFoundException</span><span class="o">][</span><span class="mi">10</span><span class="o">]</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">([</span><span class="n">Exception</span><span class="o">][</span><span class="mi">8</span><span class="o">]</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">class</span> <span class="nc">PhotoToLoad</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="n">url</span><span class="o">;</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">ImageView</span> <span class="n">imageView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">public</span> <span class="nf">PhotoToLoad</span><span class="o">(</span><span class="n">String</span> <span class="n">u</span><span class="o">,</span> <span class="n">ImageView</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">url</span> <span class="o">=</span> <span class="n">u</span><span class="o">;</span>
</span><span class='line'>                <span class="n">imageView</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">imageViewReused</span><span class="o">(</span><span class="n">PhotoToLoad</span> <span class="n">photoToLoad</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//tag used here</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">tag</span> <span class="o">=</span> <span class="n">imageViews</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">photoToLoad</span><span class="o">.</span><span class="na">imageView</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">tag</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">tag</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">photoToLoad</span><span class="o">.</span><span class="na">url</span><span class="o">))</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">class</span> <span class="nc">LoadBitmapTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">private</span> <span class="n">PhotoToLoad</span> <span class="n">mPhoto</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">protected</span> <span class="n">TransitionDrawable</span> <span class="nf">doInBackground</span><span class="o">([</span><span class="n">Object</span><span class="o">][</span><span class="mi">11</span><span class="o">]...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mPhoto</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PhotoToLoad</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">params</span><span class="o">[],</span> <span class="o">(</span><span class="n">ImageView</span><span class="o">)</span> <span class="n">params</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">imageViewReused</span><span class="o">(</span><span class="n">mPhoto</span><span class="o">))</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="n">Bitmap</span> <span class="n">bmp</span> <span class="o">=</span> <span class="n">getBitmap</span><span class="o">(</span><span class="n">mPhoto</span><span class="o">.</span><span class="na">url</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">bmp</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="n">memoryCache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">mPhoto</span><span class="o">.</span><span class="na">url</span><span class="o">,</span> <span class="n">bmp</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// TransitionDrawable let you to make a crossfade animation between 2 drawables</span>
</span><span class='line'>                <span class="c1">// It increase the sensation of smoothness</span>
</span><span class='line'>                <span class="n">TransitionDrawable</span> <span class="n">td</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">bmp</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Drawable</span><span class="o">[]</span> <span class="n">drawables</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Drawable</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>                    <span class="n">drawables</span><span class="o">[]</span> <span class="o">=</span> <span class="n">mStubDrawable</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">drawables</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BitmapDrawable</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">getRessources</span><span class="o">(),</span> <span class="n">bmp</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">td</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TransitionDrawable</span><span class="o">(</span><span class="n">drawables</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">td</span><span class="o">.</span><span class="na">setCrossFadeEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">//important if you have transparent bitmaps</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="n">td</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">TransitionDrawable</span> <span class="n">td</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">imageViewReused</span><span class="o">(</span><span class="n">mPhoto</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">//imageview reused, just return</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">td</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// bitmap found, display it !</span>
</span><span class='line'>                    <span class="n">mPhoto</span><span class="o">.</span><span class="na">imageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">drawable</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">mPhoto</span><span class="o">.</span><span class="na">imageView</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="c1">//a little crossfade</span>
</span><span class='line'>                    <span class="n">td</span><span class="o">.</span><span class="na">startTransition</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">//bitmap not found, display the default drawable</span>
</span><span class='line'>                    <span class="n">mPhoto</span><span class="o">.</span><span class="na">imageView</span><span class="o">.</span><span class="na">setImageDrawable</span><span class="o">(</span><span class="n">mStubDrawable</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>FileCache:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileCache</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">File</span> <span class="n">cacheDir</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">FileCache</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">FileCache</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kt">long</span> <span class="n">evt</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//Find the dir to save cached images</span>
</span><span class='line'>        <span class="n">cacheDir</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getCacheDir</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">cacheDir</span><span class="o">.</span><span class="na">exists</span><span class="o">())</span>
</span><span class='line'>            <span class="n">cacheDir</span><span class="o">.</span><span class="na">mkdirs</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">File</span> <span class="nf">getFile</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">cacheDir</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">url</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">File</span><span class="o">[]</span> <span class="n">files</span> <span class="o">=</span> <span class="n">cacheDir</span><span class="o">.</span><span class="na">listFiles</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">files</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">File</span> <span class="n">f</span> <span class="o">:</span> <span class="n">files</span><span class="o">)</span>
</span><span class='line'>            <span class="n">f</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Note 1</em></strong>: <em>The crossfade is done with a <a href="http://developer.android.com/reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a>, which give the feeling that your list scroll smoother!</em></p>

<p><strong><em>Note 2</em></strong>: <em>Try to avoid the setImageResource(ind resId) as much as possible and create a default drawable when you init your imageLoader. Indeed, according to the <a href="http://developer.android.com/reference/android/widget/ImageView.html#setImageResource(int)">DOC</a>,</em></p>

<blockquote><p>This does Bitmap reading and decoding on the UI thread, which can cause a latency hiccup. If that&rsquo;s a concern, consider using <code>setImageDrawable(Drawable)</code> or <code>setImageBitmap(Bitmap)</code> and <code>BitmapFactory</code> instead.</p></blockquote>

<p><strong><em>Note 3</em></strong> : <em>We use the fileCache here to get bitmaps, but we store the bitmaps thanks to our requester. You can do this very easily using an InputStream and an OutputStream</em></p>

<h2>II. The BlockingImageView</h2>

<p>When you scroll now your list, you can notice some lags when images are displayed. This is due to the setImageDrawable(Drawable d) wich can call a requestLayout (which one can take some time).</p>

<p>There is a way to block the requestLayout, pretty simple. I found it thanks to Jorim Jaggy, <a href="https://plus.google.com/113058165720861374515/posts/iTk4PjgeAWX">on this google post</a>. But look at the source code of the ImageView first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Sets a drawable as the content of this ImageView.</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * @param drawable The drawable to set</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setImageDrawable</span><span class="o">(</span><span class="n">Drawable</span> <span class="n">drawable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mDrawable</span> <span class="o">!=</span> <span class="n">drawable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mResource</span> <span class="o">=</span> <span class="o">;</span>
</span><span class='line'>            <span class="n">mUri</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">int</span> <span class="n">oldWidth</span> <span class="o">=</span> <span class="n">mDrawableWidth</span><span class="o">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">oldHeight</span> <span class="o">=</span> <span class="n">mDrawableHeight</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">updateDrawable</span><span class="o">(</span><span class="n">drawable</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">oldWidth</span> <span class="o">!=</span> <span class="n">mDrawableWidth</span> <span class="o">||</span> <span class="n">oldHeight</span> <span class="o">!=</span> <span class="n">mDrawableHeight</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">requestLayout</span><span class="o">();</span>    <span class="c1">//HERE</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">invalidate</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you know that the dimension of all your images is the same, then you can block the <code>requestlayout</code>, by using a custom <code>ImageView</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BlockingImageView</span> <span class="kd">extends</span> <span class="n">ImageView</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">mBlockLayout</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BlockingImageView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BlockingImageView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BlockingImageView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyle</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyle</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">requestLayout</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">mBlockLayout</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">requestLayout</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setImageResource</span><span class="o">(</span><span class="kt">int</span> <span class="n">resId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mBlockLayout</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">setImageResource</span><span class="o">(</span><span class="n">resId</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mBlockLayout</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setImageURI</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mBlockLayout</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">setImageURI</span><span class="o">(</span><span class="n">uri</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mBlockLayout</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setImageDrawable</span><span class="o">(</span><span class="n">Drawable</span> <span class="n">drawable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mBlockLayout</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">setImageDrawable</span><span class="o">(</span><span class="n">drawable</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mBlockLayout</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don’t forget to modify the xml of your elements to add your custom <code>ImageView</code>.</p>

<p>You should now have a smoothy listView with images.</p>

<p>Hope you enjoyed, do not hesitate to leave comments and share it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Monkey tool]]></title>
    <link href="http://antoine-merle.com/using-monkey-tool/"/>
    <updated>2012-11-20T00:00:00+01:00</updated>
    <id>http://antoine-merle.com/using-monkey-tool</id>
    <content type="html"><![CDATA[<h1></h1>

<p>This first post is dedicated to a wonderfull tool => <a href="http://developer.android.com/tools/help/monkey.html" title="Monkey">Monkey</a>!</p>

<p>If you had never heard of this tool, your life is turning better now. Monkey is a simple tool which allow to <strong>generate pseudo-random gestures</strong>, on a <strong>device</strong> or on an <strong>emulator</strong>. Shortly, you can in a few seconds simulate a user using your application, but a pretty stupid one (just as all users ?) because all his actions will be generated randomly. These actions won’t make any sense, but the aim here is to <strong>detect bugs</strong> in your app, and this can be very useful.</p>

<!-- more -->


<p><strong><em>Note 1</em></strong>: <em>This is absolutely not a substitute to other tests you should do (like unit tests…). Do what I say, not what I do :p</em></p>

<p><strong><em>Note 2</em></strong>: <em>For this tut, I suppose you have one emulator or a device connected in debug mode (with ADB drivers installed). I won’t detail this part.</em></p>

<p>Here we go, launching cmd, and browsing to <em>[android-sdk-path]**/platform-tools.</em> The basic command to use monkey is the following:</p>

<pre><code>adb shell monkey &lt;options&gt;
</code></pre>

<p>For example, if your application package is com.myapp and you want to generate 1000 gestures, with a delay of 500ms between each event, you have to use this command:</p>

<pre><code>adb shell monkey -p com.myapp --throttle 500 -v 1000
</code></pre>

<p>The list of all the options is available <a href="http://developer.android.com/tools/help/monkey.html" title="Monkey">here</a>.</p>

<h3>Going further…</h3>

<p>If you want to go one step further, you can automate a lot of things ,like the installation on the device, the launch, screenshots, etc. with the <a href="http://developer.android.com/tools/help/monkeyrunner_concepts.html" title="monkeyrunner">monkeyrunner tool</a></p>

<p>I hope you enjoyed my first tutorial, do not hesitate to comment if you have any question or share it if you liked it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ListView optimisations : Part 1 (the ViewHolder)]]></title>
    <link href="http://antoine-merle.com/listview-optimisations-part-1-the-viewholder/"/>
    <updated>2012-11-20T00:00:00+01:00</updated>
    <id>http://antoine-merle.com/listview-optimisations-part-1-the-viewholder</id>
    <content type="html"><![CDATA[<h1></h1>

<p>When you develop on Android, you will probably need to make lists pretty quickly. However, it can be complicated to understand all the mecanisms when you are a beginner. This serie of posts aims to give you tips if you want to increase the smoothness in your lists.</p>

<p>This first post is a basic one which talk about a well known tip, called ViewHolder. <!-- more -->This is absolutely essential if you want to have a viable list. But we must first understand how it works.</p>

<p>A list is composed by elements displayed in views, which ones are declared in xml files (generally). Usually, a list is composed by elements whose views are the same, only the content change. That’s why we use the same view for all the elements. The role of the adapter is to provide views to the list. It has to create and modify their contents.<br/>
Here is an example of a basic custom adapter, providing elements with a name and a description :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyAdapter</span> <span class="kd">extends</span> <span class="n">BaseAdapter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">LayoutInflater</span> <span class="n">mLayoutInflater</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span> <span class="n">mData</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MyAdapter</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">List</span> <span class="n">data</span><span class="o">){</span>
</span><span class='line'>        <span class="n">mData</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mLayoutInflater</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mData</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span>  <span class="o">:</span> <span class="n">mData</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">MyPojo</span> <span class="nf">getItem</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getItemId</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">position</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//This is bad, do not do this at home</span>
</span><span class='line'>        <span class="n">View</span> <span class="n">vi</span> <span class="o">=</span> <span class="n">mLayoutInflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">item</span><span class="o">,</span> <span class="n">parent</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TextView</span> <span class="n">tvName</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">vi</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView_item_name</span><span class="o">);</span>
</span><span class='line'>        <span class="n">TextView</span> <span class="n">tvDescription</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">vi</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView_item_description</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">MyPojo</span> <span class="n">item</span> <span class="o">=</span> <span class="n">getItem</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tvName</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>        <span class="n">tvDescription</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">vi</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is the code we could make when we don’t know that listviews recycle their views. Indeed, when you scroll down, the views disappearing on the top are reused to display items on the bottom of your list. I hope that this is clear because it’s very important :p. As a consequence, we will tag our views in order to avoid to inflate views that already exists (this operation take long time).</p>

<p>We will write a class (called ViewHolder) in which references between the widgets will be saved :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">class</span> <span class="nc">ViewHolder</span><span class="o">{</span>
</span><span class='line'>    <span class="n">TextView</span> <span class="n">tvName</span><span class="o">;</span>
</span><span class='line'>    <span class="n">TextView</span> <span class="n">tvDescription</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the adapter :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">View</span> <span class="n">vi</span> <span class="o">=</span> <span class="n">view</span><span class="o">;</span>             <span class="c1">//trying to reuse a recycled view</span>
</span><span class='line'>  <span class="n">ViewHolder</span> <span class="n">holder</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">vi</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//The view is not a recycled one: we have to inflate</span>
</span><span class='line'>      <span class="n">vi</span> <span class="o">=</span> <span class="n">mLayoutInflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">item</span><span class="o">,</span> <span class="n">parent</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>      <span class="n">holder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ViewHolder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">holder</span><span class="o">.</span><span class="na">tvName</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">vi</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView_item_name</span><span class="o">);</span>
</span><span class='line'>      <span class="n">holder</span><span class="o">.</span><span class="na">tvDescription</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">vi</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView_item_description</span><span class="o">);</span>
</span><span class='line'>      <span class="n">vi</span><span class="o">.</span><span class="na">setTag</span><span class="o">(</span><span class="n">holder</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// View recycled !</span>
</span><span class='line'>      <span class="c1">// no need to inflate</span>
</span><span class='line'>      <span class="c1">// no need to findViews by id</span>
</span><span class='line'>      <span class="n">holder</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewHolder</span><span class="o">)</span> <span class="n">vi</span><span class="o">.</span><span class="na">getTag</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">MyPojo</span> <span class="n">item</span> <span class="o">=</span> <span class="n">getItem</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">holder</span><span class="o">.</span><span class="na">tvName</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>  <span class="n">holder</span><span class="o">.</span><span class="na">tvDescription</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">vi</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to add other widgets in your elements (an image for example), you will have to add them in the ViewHolder too.</p>

<p>That’s all I’ll talk next time about the way you can optimize your images in your lists (LRUCache, etc.).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to the Monkey Runner tool]]></title>
    <link href="http://antoine-merle.com/introduction-to-the-monkey-runner-tool-2/"/>
    <updated>2012-11-20T00:00:00+01:00</updated>
    <id>http://antoine-merle.com/introduction-to-the-monkey-runner-tool-2</id>
    <content type="html"><![CDATA[<h1></h1>

<p>Hi everyone welcome and in my blog for this post dedicated to Monkey Runner (<a href="http://developer.android.com/tools/help/monkeyrunner_concepts.html">Introduction by Google here</a>). This post could be the extension of the first, which one was about Monkey (<a href="http://antoine-merle.com/monkey-tool/">link here</a>).</p>

<p>This post won’t be a course but an introduction, because the aim is to discover by yourself how much this tool can be powerful. Monkey Runner is a tool which let the developer create programs which control the connected device/emulator.These programs will be developed in Python, and can install, launch and manipulate apps, and take screenshots. This is what we need to complete a Ant script which could build and sign the app for example. Indeed, if you have many applications, automate builds/tests, etc. becomes very interesting in order to gain time&hellip; and also because letting the computer to do all the job is pretty exciting!</p>

<!-- more -->


<p>
Stop talking, and let’s go. The API is contained in three modules which are:</p>

<ul>
<li><a href="http://developer.android.com/tools/help/MonkeyRunner.html" title="MonkeyRunner">MonkeyRunner</a> : Class which provides methods for connecting a device/emulator.</li>
<li><a href="http://developer.android.com/tools/help/MonkeyDevice.html" title="MonkeyDevice">MonkeyDevice</a> : Class which provides methods for installing/uninstalling packages, sending events to an application (gestures, keyboard events, etc.)</li>
<li><a href="http://developer.android.com/tools/help/MonkeyImage.html">MonkeyImage</a> : Class which provides methods for capturing screenshots.</li>
</ul>


<p>Let’s create our monkeyrunner file, call it <em>mymonkey.py</em> for example (<em>.py</em> because I need my syntax coloring on vim :p)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">com.android.monkeyrunner</span> <span class="kn">import</span> <span class="n">MonkeyRunner</span><span class="p">,</span> <span class="n">MonkeyDevice</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">commands</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="c"># starting script</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;start&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># connection to the current device, and return a MonkeyDevice object</span>
</span><span class='line'><span class="n">device</span> <span class="o">=</span> <span class="n">MonkeyRunner</span><span class="o">.</span><span class="n">waitForConnection</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">apk_path</span> <span class="o">=</span> <span class="n">device</span><span class="o">.</span><span class="n">shell</span><span class="p">(</span><span class="s">&#39;pm path com.myapp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">apk_path</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;package:&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;myapp already installed.&quot;</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;myapp not installed, installing APKs...&quot;</span>
</span><span class='line'>    <span class="n">device</span><span class="o">.</span><span class="n">installPackage</span><span class="p">(</span><span class="s">&#39;myapp.apk&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;launching myapp...&quot;</span>
</span><span class='line'><span class="n">device</span><span class="o">.</span><span class="n">startActivity</span><span class="p">(</span><span class="n">component</span><span class="o">=</span><span class="s">&#39;com.myapp/com.myapp.MainActivity&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#screenshot</span>
</span><span class='line'><span class="n">MonkeyRunner</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">device</span><span class="o">.</span><span class="n">takeSnapshot</span><span class="p">()</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">writeToFile</span><span class="p">(</span><span class="s">&#39;./screenshots/splash.png&#39;</span><span class="p">,</span><span class="s">&#39;png&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;screen 1 taken&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#sending an event which simulate a click on the menu button</span>
</span><span class='line'><span class="n">device</span><span class="o">.</span><span class="n">press</span><span class="p">(</span><span class="s">&#39;KEYCODE_MENU&#39;</span><span class="p">,</span> <span class="n">MonkeyDevice</span><span class="o">.</span><span class="n">DOWN_AND_UP</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;end of script&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To launch this script you only have to execute this command:</p>

<p><code>monkeyrunner mymonkey.py</code></p>

<p><strong><em>Note 1</em></strong>: <em>The monkeyrunner command is situated in [android-sdk-path]/tools/</em></p>

<p><strong><em>Note 2</em></strong>: <em>If you are developing on windows, you may have to put the absolute paths (C:/etc.).</em></p>

<p><strong><em>Note 3</em></strong>: <em>You can of course run your Unit tests !</em></p>

<p>And voilà! You have now the most basic script in the world of the universe, which connect monkeyrunner to a device, install and launch an application, take and save a screenshot, and clic on the menu button, you can now imagine all the things you can do.</p>

<p>Please if you have any criticism/notes/suggestions, do not hesitate to write a comment, and if you liked this post, do not hesitate to share it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello world!]]></title>
    <link href="http://antoine-merle.com/hello-world/"/>
    <updated>2012-06-22T00:00:00+02:00</updated>
    <id>http://antoine-merle.com/hello-world</id>
    <content type="html"><![CDATA[<h1></h1>

<p><code>//TODO, this is not interesting</code></p>

<!-- more -->


<p>Bonjour et bienvenue à tous sur mon blog, entièrement dédié au développement d’applications Android.</p>

<p>Pour ce qui est de la présentation, me voilà :</p>

<p>Je m’appelle Antoine Merle, j’ai 22 ans et je suis à l’heure où j’écris cette introduction en stage dans une startup, <a href="http://www.goomeoevents.fr/" title="Goomeo">Goomeo</a>, en vue de finir ma dernière année d’études au sein de l’ISIMA.</p>

<p>J’ai décidé d’écrire ce blog pour plusieurs raisons. J’ai effectué mon premier stage de DUT dans le domaine du mobile (Android principalement) en 2009 et je n’ai pas décroché depuis. Je pense aujourd’hui continuer ma carrière dans le monde du mobile qui me passionne et j’écrirai dans ce blog ce à quoi j’ai pu faire face tout au long de celle-ci. Ce blog sera principalement constitué de tutoriels sur le dev Android. Je pense que les premiers articles seront plutôt destinés à ceux qui débutent dans le domaine et j’espère qu’ils vous apporteront de bons conseils.</p>

<p>J’ai choisi de rédiger mes premiers articles en français afin de plus me focaliser sur le contenu, même si je pense à terme publier mes articles en anglais plus français.</p>

<p>J’espère que ce blog apportera des réponses claires et les plus précises possibles aux interrogations des développeurs intéressés.</p>

<p>Bonne lecture !</p>
]]></content>
  </entry>
  
</feed>
