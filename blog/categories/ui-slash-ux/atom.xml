<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ui/ux | An Android Dev Blog]]></title>
  <link href="http://antoine-merle.com/blog/categories/ui-slash-ux/atom.xml" rel="self"/>
  <link href="http://antoine-merle.com/"/>
  <updated>2015-10-10T20:04:13+02:00</updated>
  <id>http://antoine-merle.com/</id>
  <author>
    <name><![CDATA[Antoine Merle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding a Foreground Selector to a View/ViewGroup]]></title>
    <link href="http://antoine-merle.com/blog/2013/07/17/adding-a-foreground-selector-to-a-view/"/>
    <updated>2013-07-17T23:34:00+02:00</updated>
    <id>http://antoine-merle.com/blog/2013/07/17/adding-a-foreground-selector-to-a-view</id>
    <content type="html"><![CDATA[<p>Everyone has already seen the android cards touch feedback. The selector is drawn in the foreground instead of in the background (as we usually implement it). This effect is in fact pretty simple to implement, and is already implemented in some cases.</p>

<p>Here is a screenshot of the press state effect in the Google Play app:</p>

<p><img class="center" src="/images/screenshot_googleplay.png"></p>

<!-- more -->


<h1>I.  If your view is a <code>FrameLayout</code></h1>

<p>This is the easiest way to add a foreground selector because there is a <a href="http://developer.android.com/reference/android/widget/FrameLayout.html#setForeground(android.graphics.drawable.Drawable)">method</a> for that! Indeed, you just have to pass your selector as <code>android:foreground</code> in your xml or programmatically, calling <code>setForeground(Drawable)</code>.</p>

<h1>II. If your view is not a <code>FrameLayout</code></h1>

<p>Don&rsquo;t worry, this is pretty simple. Basically, we just have to set right state to the selector (pressed, focused, etc.), set the bounds and draw it after the view itself. In that way, the selector will be drawn after, and as a consequence, over the view.</p>

<h3>Changing the state</h3>

<p>In the <code>View</code> class, a method is called each time the state of the view changes. This method is <code>drawableStateChanged()</code> (<a href="http://developer.android.com/reference/android/view/View.html#drawableStateChanged()">DOC HERE</a>).</p>

<pre><code class="java">@Override
protected void drawableStateChanged() {
    super.drawableStateChanged();

    mForegroundSelector.setState(getDrawableState());

    //redraw
    invalidate();
}
</code></pre>

<h3>Updating the drawable bounds</h3>

<p>A method is called each time the size of the view changes. This method is <code>onSizeChanged(int, int, int, int)</code> (<a href="http://developer.android.com/reference/android/view/View.html#onSizeChanged(int,">DOC HERE</a>).</p>

<pre><code class="java">@Override
protected void onSizeChanged(int width, int height, int oldwidth, int oldheight) {
    super.onSizeChanged(width, height, oldwidth, oldheight);

    mForegroundSelector.setBounds(0, 0, width, height);
}
</code></pre>

<h3>Drawing the selector</h3>

<p>There is 2 cases:</p>

<h4>1.  Your view is a <strong>not</strong> a <code>ViewGroup</code></h4>

<p>The selector has to be drawn after calling <code>onDraw(Canvas canvas)</code></p>

<pre><code class="java">@Override
protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);

    mForegroundSelector.draw(canvas);
}
</code></pre>

<h4>2.  Your view is a <code>ViewGroup</code></h4>

<p>The selector has to be drawn after all his children, that means after calling <code>dispatchDraw(Canvas canvas)</code></p>

<pre><code class="java">@Override
protected void dispatchDraw(Canvas canvas) {
    super.dispatchDraw(canvas);

    mForegroundSelector.draw(canvas);
}
</code></pre>

<h1>Drawing an animated Drawable</h1>

<p>If your drawable is animated, there is a bit more to do. Let&rsquo;s suppose that we have a selector with the attribute <code>android:exitFadeDuration</code>. That means when the selector changes its state, the old state will fade out.</p>

<p>We first have to move the draw method of the selector from <code>onDraw()</code> (for views) or <code>dispatchDraw()</code> (for ViewGroups) to the <code>draw(Canvas)</code> method, just like this:</p>

<pre><code class="java">@Override
public void draw(Canvas canvas) {
  super.draw(canvas);

  mForegroundDrawable.draw(canvas);
}
</code></pre>

<p>Then we have to Override <code>jumpDrawablesToCurrentState</code> to indicate our selector to do transition animations between states, and <code>verifyDrawable</code> to indicate the view we are displaying our own drawable.</p>

<pre><code class="java">@Override
protected boolean verifyDrawable(Drawable who) {
  return super.verifyDrawable(who) || (who == mForegroundDrawable);
}

@TargetApi(11)
@Override
public void jumpDrawablesToCurrentState() {
  super.jumpDrawablesToCurrentState();
  mForegroundDrawable.jumpToCurrentState();
}
</code></pre>

<p>But what is doing jumpToCurrentState()? Let&rsquo;s see a bit of source code, in the <code>DrawableContainer</code> class.</p>

<pre><code class="java">@Override
public void jumpToCurrentState() {
    boolean changed = false;
    if (mLastDrawable != null) {
        mLastDrawable.jumpToCurrentState();
        mLastDrawable = null;
        changed = true;
    }
    if (mCurrDrawable != null) {
        mCurrDrawable.jumpToCurrentState();
        mCurrDrawable.mutate().setAlpha(mAlpha);
    }
    if (mExitAnimationEnd != 0) {
        mExitAnimationEnd = 0;
        changed = true;
    }
    if (mEnterAnimationEnd != 0) {
        mEnterAnimationEnd = 0;
        changed = true;
    }
    if (changed) {
        invalidateSelf();
    }
}
</code></pre>

<p>We can notice that <code>jumpToCurrentState()</code> calls <code>invalidateSelf()</code>. And here is the <code>invalidateSelf()</code> method source code:</p>

<pre><code class="java">/**
 * Use the current {@link Callback} implementation to have this Drawable
 * redrawn.  Does nothing if there is no Callback attached to the
 * Drawable.
 *
 * @see Callback#invalidateDrawable
 * @see #getCallback() 
 * @see #setCallback(android.graphics.drawable.Drawable.Callback) 
 */
public void invalidateSelf() {
    final Callback callback = getCallback();
    if (callback != null) {
        callback.invalidateDrawable(this);
    }
}
</code></pre>

<p>We clearly see that if the callback is not set, the drawable won&rsquo;t be redrawn.
So let&rsquo;s set a callback when we init our selector.</p>

<pre><code class="java">private void init(Context context) {
  mForegroundDrawable = getResources().getDrawable(R.drawable.myselector);

  //set a callback, or the selector won't be animated
  mForegroundDrawable.setCallback(this);
}
</code></pre>

<p>Your selector should fade out now!</p>

<h1>Pivot position</h1>

<p>If you tried to use a foreground <code>Ripple</code> drawable, you probably noticed that wherever you tap on your view, the animation will always start from the center.
The easiest way to manage this is to override the <a href="https://developer.android.com/reference/android/view/View.html#drawableHotspotChanged(float,">drawableHotspotChanged</a> method (<em>Api 21+</em>):</p>

<pre><code class="java">@Override
public void drawableHotspotChanged(float x, float y) {
    super.drawableHotspotChanged(x, y);
    if (mForegroundDrawable != null) {
        mForegroundDrawable.setHotspot(x, y);
    }
}
</code></pre>

<p>Thanks to <a href="https://plus.google.com/+AlexLockwood/">+Alex Lockwood</a> for this :)</p>

<h1>EXTRA</h1>

<h3>Retrieve the default background, and set it as the foreground</h3>

<p>You can get the default background selector of your theme and set it as your foreground selector if you want:</p>

<pre><code class="java">TypedArray a = getContext().obtainStyledAttributes(new int[]{android.R.attr.selectableItemBackground});
mForegroundDrawable = a.getDrawable(0);
if (mForegroundDrawable != null) {
  mForegroundDrawable.setCallback(this);
}
a.recycle();
</code></pre>

<h1>Conclusion</h1>

<p>I made here a basic example of how to add a foreground selector to a custom view, with the main methods. To see a complete implementation (Tests if the drawable is stateful, paddings, etc.), you can look at the source code of FrameLayout.</p>
]]></content>
  </entry>
  
</feed>
